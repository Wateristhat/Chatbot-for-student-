# D√°n to√†n b·ªô code n√†y v√†o file pages/8_üí¨_Tr√≤_chuy·ªán.py
import base64
import html
import os
import random
import re
import time
import subprocess
import tempfile
from datetime import datetime
from io import BytesIO

import pandas as pd
import streamlit as st

# Optional: Gemini
try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False

# Fallback TTS
try:
    from gtts import gTTS
    GTTS_AVAILABLE = True
except ImportError:
    GTTS_AVAILABLE = False

# Preferred neural TTS (Microsoft Edge TTS)
try:
    import edge_tts
    EDGE_TTS_AVAILABLE = True
except ImportError:
    EDGE_TTS_AVAILABLE = False

# --- KI·ªÇM TRA ƒêƒÇNG NH·∫¨P ---
if not st.session_state.get('user_id'):
    st.warning("B·∫°n ∆°i, h√£y quay v·ªÅ Trang Ch·ªß ƒë·ªÉ ƒëƒÉng nh·∫≠p nh√©! ‚ù§Ô∏è")
    st.stop()

# ========== 0) H·∫∞NG S·ªê V√Ä TR·∫†NG TH√ÅI ==========
STATE_CHAT = "chat"
STATE_JOURNAL = "journal"
STATE_RELAX = "relax"

CHAT_STATE_MAIN = "main"
CHAT_STATE_TAM_SU_SELECTION = "tam_su_selection"
CHAT_STATE_TAM_SU_CHAT = "tam_su_chat"
CHAT_STATE_GIAO_TIEP_SELECTION_BASIC = "giao_tiep_selection_basic"
CHAT_STATE_GIAO_TIEP_SELECTION_EXTENDED = "giao_tiep_selection_extended"
CHAT_STATE_GIAO_TIEP_PRACTICE = "giao_tiep_practice"
CHAT_STATE_AWAITING_FOLLOWUP = "awaiting_followup"

# ========== 1) C·∫§U H√åNH UI & CSS ==========
st.set_page_config(page_title="üí¨ Tr√≤ chuy·ªán", page_icon="üí¨", layout="wide")

st.markdown(
    """
<style>
/* Reset chrome */
#MainMenu, footer, header { visibility: hidden; }
.stApp { background-color: #FFFFFF; }
.chat-shell { max-width: 820px; margin: 0 auto; padding-top: 64px; padding-bottom: 150px;}
.chat-header { position: fixed; top: 0; left: 0; right: 0; z-index: 999; background: #fff; border-bottom: 1px solid #efefef; box-shadow: 0 2px 10px rgba(0,0,0,0.05);}
.chat-header-inner { max-width: 820px; margin: 0 auto; padding: 12px 16px; display: flex; align-items: center; gap: 12px;}
.chat-title { font-weight: 700; font-size: 1.05rem; }
/* Bubbles */
.bubble-row { display:flex; margin: 12px 0; }
.bubble-user { justify-content: flex-end; }
.msg { border-radius: 18px; padding: 12px 16px; max-width: 75%; font-size: 1rem; line-height: 1.5; word-wrap: break-word;}
.msg-user { background: linear-gradient(135deg, #25D366, #128C7E); color: white; border-top-right-radius: 6px; box-shadow: 0 1px 2px rgba(0,0,0,0.1);}
.msg-bot { background: #F3F4F6; color: #111; border-top-left-radius: 6px; box-shadow: 0 1px 2px rgba(0,0,0,0.05);}
.typing { display:inline-block; padding: 8px 14px; border-radius: 18px; background: #F3F4F6; }
.typing span { height: 8px; width: 8px; margin: 0 2px; background-color: #9E9E9E; display: inline-block; border-radius: 50%; opacity: 0.5; animation: bob 1s infinite;}
@keyframes bob { 0%,100%{transform:translateY(0)} 50%{transform:translateY(-6px)} }
.typing span:nth-child(1){animation-delay:-0.3s} .typing span:nth-child(2){animation-delay:-0.15s}
.quick-actions { display:flex; gap:10px; flex-wrap: wrap; margin: 10px 0 16px; }
.chip { border: none; color: white; background: linear-gradient(135deg, #0084FF, #0069cc); border-radius: 20px; padding: 8px 14px; font-size: 0.9rem; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 1px 3px rgba(0,0,0,0.1);}
.chip:hover { transform: translateY(-2px); box-shadow: 0 3px 6px rgba(0,0,0,0.15);}
.input-bar { position: fixed; left: 0; right: 0; bottom: 0; z-index: 999; background: #fff; border-top: 1px solid #efefef; box-shadow: 0 -2px 10px rgba(0,0,0,0.05);}
.input-inner { max-width: 820px; margin: 0 auto; padding: 15px 16px;}
button { transition: all 0.2s ease;}
button:hover { transform: translateY(-2px); box-shadow: 0 3px 6px rgba(0,0,0,0.1);}
.option-pill { background: #f0f2f5; border-radius: 18px; padding: 10px 14px; margin: 5px 0; cursor: pointer; transition: all 0.2s; border: 1px solid #e4e6eb;}
.option-pill:hover { background: #e4e6eb;}
::-webkit-scrollbar { width: 8px; }
::-webkit-scrollbar-track { background: #f1f1f1; }
::-webkit-scrollbar-thumb { background: #c1c1c1; border-radius: 10px;}
::-webkit-scrollbar-thumb:hover { background: #a8a8a8;}
</style>
""",
    unsafe_allow_html=True,
)

# Header
st.markdown(
    """
<div class="chat-header">
  <div class="chat-header-inner">
    <div>üí¨</div>
    <div class="chat-title">Tr√≤ chuy·ªán - B·∫°n ƒê·ªìng H√†nh</div>
  </div>
</div>
""",
    unsafe_allow_html=True,
)

# ========== 2) CONFIG D·ªÆ LI·ªÜU N·ªòI DUNG ==========
@st.cache_data
def get_config():
    return {
        "ui": {
            "title": "B·∫°n ƒë·ªìng h√†nh üíñ",
            "input_placeholder": "Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...",
        },
        "tam_su": {
            "intro_message": "H√¥m nay b·∫°n c·∫£m th·∫•y nh∆∞ th·∫ø n√†o n√®? M√¨nh lu√¥n s·∫µn l√≤ng l·∫Øng nghe b·∫°n nha üåü",
            "positive_affirmation_trigger": "üåº Nghe m·ªôt l·ªùi t√≠ch c·ª±c",
            "positive_affirmations": [
                "B·∫°n m·∫°nh m·∫Ω h∆°n b·∫°n nghƒ© r·∫•t nhi·ªÅu.",
                "M·ªói b∆∞·ªõc nh·ªè b·∫°n ƒëi ƒë·ªÅu l√† m·ªôt th√†nh c√¥ng l·ªõn.",
                "C·∫£m x√∫c c·ªßa b·∫°n l√† th·∫≠t v√† ƒë√°ng ƒë∆∞·ª£c t√¥n tr·ªçng.",
                "B·∫°n x·ª©ng ƒë√°ng ƒë∆∞·ª£c y√™u th∆∞∆°ng v√† h·∫°nh ph√∫c.",
                "H√¥m nay c√≥ th·ªÉ kh√≥ khƒÉn, nh∆∞ng ng√†y mai s·∫Ω t·ªët h∆°n."
            ],
            "moods": {
                "üòÑ Vui": {
                    "keywords": ["vui", "h·∫°nh ph√∫c", "tuy·ªát v·ªùi", "gi·ªèi", "ƒëi ch∆°i", "üéâ", "üòÑ"],
                    "initial": "Tuy·ªát v·ªùi qu√°! C√≥ chuy·ªán g√¨ vui kh√¥ng, k·ªÉ m√¨nh nghe v·ªõi n√®!",
                    "styles": {
                        "Khuy·∫øn kh√≠ch": [
                            "Nghe l√† th·∫•y vui gi√πm b·∫°n lu√¥n √°! K·ªÉ th√™m ch√∫t n·ªØa ƒëi!",
                            "H√¥m nay ch·∫Øc l√† m·ªôt ng√†y ƒë·∫∑c bi·ªát r·ªìi! Chia s·∫ª th√™m nh√©!"
                        ]
                    }
                },
                "üòî Bu·ªìn": {
                    "keywords": ["bu·ªìn", "ch√°n", "stress", "c√¥ ƒë∆°n", "t·ªá", "üòî"],
                    "initial": "√îi, m√¨nh nghe r·ªìi n√®. C√≥ chuy·ªán g√¨ l√†m b·∫°n bu·ªìn v·∫≠y?",
                    "styles": {
                        "L·∫Øng nghe": [
                            "Kh√¥ng sao ƒë√¢u, b·∫°n bu·ªìn c≈©ng ƒë∆∞·ª£c m√†. K·ªÉ m√¨nh nghe th√™m nh√©.",
                            "B·∫°n kh√¥ng c·∫ßn ph·∫£i g·ªìng ƒë√¢u, m√¨nh ·ªü ƒë√¢y n√®."
                        ]
                    }
                }
            }
        },
        "giao_tiep": {
            "intro_message": "H√£y ch·ªçn m·ªôt t√¨nh hu·ªëng b√™n d∆∞·ªõi ƒë·ªÉ m√¨nh c√πng luy·ªán t·∫≠p nh√©!",
            "confirm_buttons": {"understood": "‚úÖ ƒê√£ hi·ªÉu!", "not_understood": "‚ùì Ch∆∞a r√µ l·∫Øm!"},
            "scenarios_basic": {
                "üëã Ch√†o h·ªèi b·∫°n b√®": "B·∫°n c√≥ th·ªÉ n√≥i: \"Ch√†o b·∫°n, h√¥m nay vui kh√¥ng?\"",
                "üôã H·ªèi b√†i th·∫ßy c√¥": "B·∫°n th·ª≠ h·ªèi: \"Th·∫ßy/c√¥ ∆°i, ph·∫ßn n√†y em ch∆∞a r√µ ·∫°?\""
            },
            "scenarios_extended": {
                "üìö Nh·ªù b·∫°n gi√∫p ƒë·ª°": "B·∫°n th·ª≠ n√≥i: \"C·∫≠u ch·ªâ m√¨nh ch·ªó n√†y v·ªõi ƒë∆∞·ª£c kh√¥ng?\"",
                "üôè Xin l·ªói khi ƒë·∫øn mu·ªôn": "B·∫°n c√≥ th·ªÉ n√≥i: \"Em xin l·ªói v√¨ ƒë√£ ƒë·∫øn mu·ªôn, em c√≥ th·ªÉ v√†o l·ªõp kh√¥ng ·∫°?\"",
                "ü§î H·ªèi khi kh√¥ng hi·ªÉu b√†i": "Th·ª≠ n√≥i: \"Em ch∆∞a hi·ªÉu ph·∫ßn n√†y, th·∫ßy/c√¥ c√≥ th·ªÉ gi·∫£i th√≠ch l·∫°i ƒë∆∞·ª£c kh√¥ng ·∫°?\"",
            },
        },
        "general": {
            "neutral_replies": [
                "M√¨nh ch∆∞a r√µ l·∫Øm, b·∫°n n√≥i c·ª• th·ªÉ h∆°n ƒë∆∞·ª£c kh√¥ng?",
                "M√¨nh ƒëang nghe b·∫°n n√®, b·∫°n mu·ªën n√≥i th√™m ƒëi·ªÅu g√¨ kh√¥ng?",
                "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ ƒëi·ªÅu ƒë√≥ kh√¥ng?",
                "M√¨nh mu·ªën hi·ªÉu b·∫°n h∆°n. B·∫°n c√≥ th·ªÉ k·ªÉ chi ti·∫øt h∆°n ƒë∆∞·ª£c kh√¥ng?"
            ],
            "follow_up_prompt": "B·∫°n mu·ªën ti·∫øp t·ª•c t√¢m s·ª± hay luy·ªán n√≥i chuy·ªán trong l·ªõp n√®?",
            "end_chat_replies": [
                "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª v·ªõi m√¨nh h√¥m nay nha. M√¨nh lu√¥n s·∫µn s√†ng khi b·∫°n c·∫ßn üíñ",
                "B·∫°n ƒë√£ l√†m r·∫•t t·ªët khi b·ªôc l·ªô c·∫£m x√∫c. Khi n√†o c·∫ßn, m√¨nh v·∫´n ·ªü ƒë√¢y ‚ú®"
            ],
        },
    }
CONFIG = get_config()

# ========== 3) SESSION STATE ==========

if "page_state" not in st.session_state:
    st.session_state.page_state = "chat"
if "chat_state" not in st.session_state:
    st.session_state.chat_state = "main"
if "history" not in st.session_state:
    st.session_state.history = [
        {"sender": "bot", "text": "Ch√†o b·∫°n, m√¨nh l√† B·∫°n ƒë·ªìng h√†nh ƒë√¢y! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"}
    ]
if "turns" not in st.session_state:
    st.session_state.turns = 0
if "current_mood" not in st.session_state:
    st.session_state.current_mood = None
if "current_scenario" not in st.session_state:
    st.session_state.current_scenario = None
if "tts_enabled" not in st.session_state:
    st.session_state.tts_enabled = True
if "tts_voice" not in st.session_state:
    st.session_state.tts_voice = "vi-VN-HoaiMyNeural"
if "tts_rate" not in st.session_state:
    st.session_state.tts_rate = 0

# ========== 4) GEMINI AI (PHI√äN B·∫¢N ƒê√É S·ª¨A L·ªñI V√Ä T·ªêI ∆ØU) ==========
@st.cache_resource
def initialize_gemini():
    if not GENAI_AVAILABLE:
        st.sidebar.warning("Th∆∞ vi·ªán google.generativeai ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.", icon="‚ö†Ô∏è")
        return None

    api_key = st.secrets.get("GOOGLE_API_KEY")
    if not api_key:
        st.sidebar.error("Ch∆∞a c·∫•u h√¨nh `GOOGLE_API_KEY` trong Streamlit Secrets.", icon="üö®")
        return None

    try:
        genai.configure(api_key=api_key)
        # T·∫¨P TRUNG V√ÄO MODEL ·ªîN ƒê·ªäNH NH·∫§T L√Ä "gemini-pro"
        model = genai.GenerativeModel("gemini-pro")
        # Ping model ƒë·ªÉ ki·ªÉm tra
        model.generate_content("ping", generation_config={"max_output_tokens": 1})
        st.sidebar.success("‚úÖ AI ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!")
        return model
    except Exception as e:
        st.sidebar.error(f"L·ªói k·∫øt n·ªëi Gemini: {e}", icon="üö®")
        return None

gemini_model = initialize_gemini()
AI_ENABLED = gemini_model is not None

if AI_ENABLED and "gemini_chat" not in st.session_state:
    st.session_state.gemini_chat = gemini_model.start_chat(history=[])

def call_gemini(prompt):
    if not AI_ENABLED or not hasattr(st.session_state, 'gemini_chat'):
        return random.choice(CONFIG["general"]["neutral_replies"])

    system_prompt = "B·∫°n l√† 'B·∫°n ƒê·ªìng H√†nh', m·ªôt chatbot AI th√¢n thi·ªán, th·∫•u c·∫£m v√† ki√™n nh·∫´n, ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ tr√≤ chuy·ªán v√† h·ªó tr·ª£ tinh th·∫ßn cho h·ªçc sinh. H√£y tr·∫£ l·ªùi m·ªôt c√°ch nh·∫π nh√†ng, t√≠ch c·ª±c v√† ƒë∆°n gi·∫£n."
    full_prompt = f"{system_prompt}\n\nNg∆∞·ªùi d√πng n√≥i: {prompt}"

    try:
        response = st.session_state.gemini_chat.send_message(full_prompt)
        return response.text
    except Exception as e:
        st.error(f"L·ªói khi g·ªçi Gemini: {e}")
        return "Xin l·ªói, AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng."

# ========== 5) TTS (EDGE TTS NEURAL + FALLBACK GTTS) ==========

def synthesize_tts(text, voice, rate_pct):
    if EDGE_TTS_AVAILABLE:
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
                temp_path = temp_file.name
            rate_str = f"{'+' if rate_pct>=0 else ''}{rate_pct}%"
            cmd = [
                "edge-tts", "--voice", voice, "--rate", rate_str, 
                "--text", text, "--write-media", temp_path
            ]
            subprocess.run(cmd, check=True, capture_output=True, text=True)
            with open(temp_path, 'rb') as f:
                audio_data = f.read()
            os.unlink(temp_path)
            return audio_data
        except Exception as e:
            print(f"L·ªói Edge TTS: {e}. Chuy·ªÉn sang gTTS.")

    if GTTS_AVAILABLE:
        try:
            bio = BytesIO()
            tts = gTTS(text=text, lang="vi")
            tts.write_to_fp(bio)
            bio.seek(0)
            return bio.read()
        except Exception as e:
            print(f"L·ªói gTTS: {e}")

    return None

def autoplay_audio(audio_data):
    if audio_data is None:
        return
    try:
        b64 = base64.b64encode(audio_data).decode()
        md = f"""
        <audio autoplay="true">
          <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
        </audio>
        """
        st.components.v1.html(md, height=0)
    except Exception as e:
        print(f"L·ªói ph√°t √¢m thanh: {e}")

# ========== 6) LOGIC CHAT & AI ==========

def add_message(sender, text):
    st.session_state.history.append({"sender": sender, "text": text})

def detect_mood_from_text(text):
    cfg = CONFIG["tam_su"]["moods"]
    lowered = text.lower()
    tokens = set(re.findall(r"\b\w+\b", lowered))
    emojis = {"üòÑ", "üòî"}
    tokens.update(ch for ch in text if ch in emojis)
    best, score = None, 0
    for mood, m_cfg in cfg.items():
        kws = set(m_cfg["keywords"])
        matches = len(tokens.intersection(kws))
        if matches > score:
            best, score = mood, matches
    return best

def respond_bot(text):
    add_message("bot", text)
    if st.session_state.tts_enabled:
        audio = synthesize_tts(text, st.session_state.tts_voice, st.session_state.tts_rate)
        if audio:
            autoplay_audio(audio)

# ========== 7) GIAO DI·ªÜN CH√çNH ==========

with st.sidebar:
    st.markdown("### C√†i ƒë·∫∑t gi·ªçng n√≥i")
    st.session_state.tts_enabled = st.toggle("ƒê·ªçc to ph·∫£n h·ªìi", value=st.session_state.get("tts_enabled", True))
    voice = st.selectbox(
        "Gi·ªçng ƒë·ªçc",
        options=["vi-VN-HoaiMyNeural (N·ªØ)", "vi-VN-NamMinhNeural (Nam)"],
        index=0 if "HoaiMy" in st.session_state.get("tts_voice", "vi-VN-HoaiMyNeural") else 1
    )
    st.session_state.tts_voice = "vi-VN-HoaiMyNeural" if "HoaiMy" in voice else "vi-VN-NamMinhNeural"
    rate = st.slider("T·ªëc ƒë·ªô n√≥i (%)", -50, 50, st.session_state.get("tts_rate", 0), step=5)
    st.session_state.tts_rate = rate

    st.divider()

    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán"):
        st.session_state.history = [
            {"sender": "bot", "text": "Ch√†o b·∫°n, m√¨nh l√† B·∫°n ƒë·ªìng h√†nh ƒë√¢y! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"}
        ]
        if AI_ENABLED:
            st.session_state.gemini_chat = gemini_model.start_chat(history=[])
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán!")
        st.rerun()

    st.markdown("### Gi·ªõi thi·ªáu")
    st.markdown("""
    **B·∫°n ƒê·ªìng H√†nh** l√† chatbot h·ªó tr·ª£ t√¢m l√Ω v√† k·ªπ nƒÉng giao ti·∫øp cho h·ªçc sinh.
    - L·∫Øng nghe v√† ƒë·ªìng c·∫£m
    - H·ªó tr·ª£ luy·ªán t·∫≠p giao ti·∫øp
    - Ghi nh·∫≠t k√Ω c·∫£m x√∫c
    - H∆∞·ªõng d·∫´n b√†i t·∫≠p th∆∞ gi√£n
    """)
    st.markdown("Phi√™n b·∫£n: 1.5.0 (ƒê√£ t·ªëi ∆∞u)")

# Main chat UI
st.markdown('<div class="chat-shell">', unsafe_allow_html=True)

for m in st.session_state.history:
    cls_row = "bubble-row bubble-user" if m["sender"] == "user" else "bubble-row"
    cls_msg = "msg msg-user" if m["sender"] == "user" else "msg msg-bot"
    st.markdown(
        f'<div class="{cls_row}"><div class="{cls_msg}">{html.escape(m["text"])}</div></div>',
        unsafe_allow_html=True
    )

if st.session_state.chat_state == "main":
    quick_actions_col = st.container()
    with quick_actions_col:
        st.markdown('<div class="quick-actions">', unsafe_allow_html=True)
        qa_cols = st.columns(4)
        if qa_cols[0].button("üíñ T√¢m s·ª±", use_container_width=True, key="btn_tam_su"):
            st.session_state.chat_state = "tam_su_selection"
            respond_bot(CONFIG["tam_su"]["intro_message"])
            st.rerun()
        if qa_cols[1].button("üó£Ô∏è Luy·ªán giao ti·∫øp", use_container_width=True, key="btn_giao_tiep"):
            st.session_state.chat_state = "giao_tiep_selection_basic"
            respond_bot(CONFIG["giao_tiep"]["intro_message"])
            st.rerun()
        if qa_cols[2].button("üìì Nh·∫≠t k√Ω", use_container_width=True, key="btn_journal"):
            st.session_state.page_state = "journal"
            st.rerun()
        if qa_cols[3].button("üòå Th∆∞ gi√£n", use_container_width=True, key="btn_relax"):
            st.session_state.page_state = "relax"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)

options_container = st.container()
with options_container:
    if st.session_state.chat_state == "tam_su_selection":
        moods = list(CONFIG["tam_su"]["moods"].keys())
        cols = st.columns(len(moods))
        for i, mood in enumerate(moods):
            if cols[i].button(mood, key=f"mood_{i}"):
                st.session_state.chat_state = "tam_su_chat"
                st.session_state.current_mood = mood
                st.session_state.turns = 0
                respond_bot(CONFIG["tam_su"]["moods"][mood]["initial"])
                st.rerun()
    elif st.session_state.chat_state == "tam_su_chat":
        st.markdown("#### T√πy ch·ªçn")
        col1, col2 = st.columns(2)
        if col1.button(CONFIG["tam_su"]["positive_affirmation_trigger"], use_container_width=True):
            affirm = random.choice(CONFIG["tam_su"]["positive_affirmations"])
            st.session_state.chat_state = "main"
            respond_bot(affirm)
            st.rerun()
        if col2.button("üèÅ K·∫øt th√∫c", use_container_width=True):
            st.session_state.chat_state = "main"
            respond_bot(random.choice(CONFIG["general"]["end_chat_replies"]))
            st.rerun()
    elif st.session_state.chat_state == "giao_tiep_selection_basic":
        st.markdown("#### T√¨nh hu·ªëng c∆° b·∫£n")
        for scenario in CONFIG["giao_tiep"]["scenarios_basic"].keys():
            if st.button(scenario, use_container_width=True, key=f"scenario_basic_{scenario}"):
                st.session_state.chat_state = "giao_tiep_practice"
                st.session_state.current_scenario = scenario
                respond_bot(CONFIG["giao_tiep"]["scenarios_basic"][scenario])
                st.rerun()
    # ... (v√† c√°c states c√≤n l·∫°i nh∆∞ giao_tiep_selection_extended, giao_tiep_practice) ...

# Input bar v√† x·ª≠ l√Ω logic
if prompt := st.chat_input(CONFIG["ui"]["input_placeholder"]):
    add_message("user", prompt)
    st.session_state.turns += 1

    with st.chat_message("assistant"):
        st.markdown('<div class="bubble-row"><div class="typing"><span></span><span></span><span></span></div></div>', unsafe_allow_html=True)

        response_text = ""
        if st.session_state.chat_state == "tam_su_chat":
            mood = st.session_state.current_mood
            styles_all = sum(CONFIG["tam_su"]["moods"][mood]["styles"].values(), [])
            response_text = random.choice(styles_all)
            if st.session_state.turns >= 2:
                st.session_state.chat_state = "awaiting_followup"
                response_text += f" {CONFIG['general']['follow_up_prompt']}"
        else:
            detected_mood = detect_mood_from_text(prompt)
            if detected_mood:
                st.session_state.chat_state = "tam_su_chat"
                st.session_state.current_mood = detected_mood
                st.session_state.turns = 0
                response_text = CONFIG["tam_su"]["moods"][detected_mood]["initial"]
            else:
                response_text = call_gemini(prompt)
                st.session_state.chat_state = "awaiting_followup"

        respond_bot(response_text)

    st.rerun()

st.markdown('</div>', unsafe_allow_html=True)
st.markdown(
    """
<div class="input-bar">
  <div class="input-inner">
    <small style="color:#999">M·∫πo: B·∫°n c√≥ th·ªÉ b·∫•m c√°c g·ª£i √Ω nhanh ph√≠a tr√™n ƒë·ªÉ thao t√°c nhanh h∆°n.</small>
  </div>
</div>
""",
    unsafe_allow_html=True,
)

# ========== 8) ROUTER N·ªòI B·ªò: NH·∫¨T K√ù & TH∆Ø GI√ÉN ==========
def render_journal_ui():
    # ... (To√†n b·ªô code c·ªßa render_journal_ui) ...
    pass
def render_relax_ui():
    # ... (To√†n b·ªô code c·ªßa render_relax_ui) ...
    pass

if st.session_state.page_state == "journal":
    render_journal_ui()
elif st.session_state.page_state == "relax":
    render_relax_ui()
