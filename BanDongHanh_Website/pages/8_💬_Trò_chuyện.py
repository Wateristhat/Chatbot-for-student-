# D√°n to√†n b·ªô code n√†y v√†o file pages/8_üí¨_Tr√≤_chuy·ªán.py
import base64
import html
import os
import random
import re
import time
import subprocess
import tempfile
from datetime import datetime
from io import BytesIO

import pandas as pd
import streamlit as st

# Optional: Gemini
try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False

# Fallback TTS
try:
    from gtts import gTTS
    GTTS_AVAILABLE = True
except ImportError:
    GTTS_AVAILABLE = False

# --- KI·ªÇM TRA ƒêƒÇNG NH·∫¨P ---
if not st.session_state.get('user_id'):
    st.warning("B·∫°n ∆°i, h√£y quay v·ªÅ Trang Ch·ªß ƒë·ªÉ ƒëƒÉng nh·∫≠p nh√©! ‚ù§Ô∏è")
    st.stop()
    
# ========== C·∫§U H√åNH UI & CSS ==========
st.set_page_config(page_title="üí¨ Tr√≤ chuy·ªán", page_icon="üí¨", layout="wide")
st.markdown(
    """
<style>
/* Reset chrome */
#MainMenu, footer, header { visibility: hidden; }
.stApp { background-color: #FFFFFF; }
.chat-shell { max-width: 820px; margin: 0 auto; padding-top: 64px; padding-bottom: 150px;}
.chat-header { position: fixed; top: 0; left: 0; right: 0; z-index: 999; background: #fff; border-bottom: 1px solid #efefef; box-shadow: 0 2px 10px rgba(0,0,0,0.05);}
.chat-header-inner { max-width: 820px; margin: 0 auto; padding: 12px 16px; display: flex; align-items: center; gap: 12px;}
.chat-title { font-weight: 700; font-size: 1.05rem; }
.bubble-row { display:flex; margin: 12px 0; }
.bubble-user { justify-content: flex-end; }
.msg { border-radius: 18px; padding: 12px 16px; max-width: 75%; font-size: 1rem; line-height: 1.5; word-wrap: break-word;}
.msg-user { background: linear-gradient(135deg, #25D366, #128C7E); color: white; border-top-right-radius: 6px; box-shadow: 0 1px 2px rgba(0,0,0,0.1);}
.msg-bot { background: #F3F4F6; color: #111; border-top-left-radius: 6px; box-shadow: 0 1px 2px rgba(0,0,0,0.05);}
.quick-actions { display:flex; gap:10px; flex-wrap: wrap; margin: 10px 0 16px; }
.input-bar { position: fixed; left: 0; right: 0; bottom: 0; z-index: 999; background: #fff; border-top: 1px solid #efefef; box-shadow: 0 -2px 10px rgba(0,0,0,0.05);}
.input-inner { max-width: 820px; margin: 0 auto; padding: 15px 16px;}
</style>
""",
    unsafe_allow_html=True,
)
st.markdown("""<div class="chat-header"> <div class="chat-header-inner"> <div>üí¨</div> <div class="chat-title">Tr√≤ chuy·ªán - B·∫°n ƒê·ªìng H√†nh</div> </div> </div>""", unsafe_allow_html=True)

# ========== CONFIG D·ªÆ LI·ªÜU N·ªòI DUNG ==========
@st.cache_data
def get_config():
    return {
        "ui": { "title": "B·∫°n ƒë·ªìng h√†nh üíñ", "input_placeholder": "Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...", },
        "tam_su": {
            "intro_message": "H√¥m nay b·∫°n c·∫£m th·∫•y nh∆∞ th·∫ø n√†o n√®? M√¨nh lu√¥n s·∫µn l√≤ng l·∫Øng nghe b·∫°n nha üåü",
            "positive_affirmation_trigger": "üåº Nghe m·ªôt l·ªùi t√≠ch c·ª±c",
            "positive_affirmations": [
                "B·∫°n m·∫°nh m·∫Ω h∆°n b·∫°n nghƒ© r·∫•t nhi·ªÅu.", "M·ªói b∆∞·ªõc nh·ªè b·∫°n ƒëi ƒë·ªÅu l√† m·ªôt th√†nh c√¥ng l·ªõn.",
                "C·∫£m x√∫c c·ªßa b·∫°n l√† th·∫≠t v√† ƒë√°ng ƒë∆∞·ª£c t√¥n tr·ªçng.", "B·∫°n x·ª©ng ƒë√°ng ƒë∆∞·ª£c y√™u th∆∞∆°ng v√† h·∫°nh ph√∫c.",
                "H√¥m nay c√≥ th·ªÉ kh√≥ khƒÉn, nh∆∞ng ng√†y mai s·∫Ω t·ªët h∆°n."
            ],
            "moods": {
                "üòÑ Vui": { "keywords": ["vui", "h·∫°nh ph√∫c", "tuy·ªát v·ªùi"], "initial": "Tuy·ªát v·ªùi qu√°! C√≥ chuy·ªán g√¨ vui kh√¥ng, k·ªÉ m√¨nh nghe v·ªõi n√®!", "styles": {"Khuy·∫øn kh√≠ch": ["Nghe l√† th·∫•y vui gi√πm b·∫°n lu√¥n √°! K·ªÉ th√™m ch√∫t n·ªØa ƒëi!"]} },
                "üòî Bu·ªìn": { "keywords": ["bu·ªìn", "ch√°n", "stress", "c√¥ ƒë∆°n"], "initial": "√îi, m√¨nh nghe r·ªìi n√®. C√≥ chuy·ªán g√¨ l√†m b·∫°n bu·ªìn v·∫≠y?", "styles": {"L·∫Øng nghe": ["Kh√¥ng sao ƒë√¢u, b·∫°n bu·ªìn c≈©ng ƒë∆∞·ª£c m√†. K·ªÉ m√¨nh nghe th√™m nh√©."]} }
            }
        },
        "giao_tiep": { "intro_message": "H√£y ch·ªçn m·ªôt t√¨nh hu·ªëng b√™n d∆∞·ªõi ƒë·ªÉ m√¨nh c√πng luy·ªán t·∫≠p nh√©!", "scenarios_basic": { "üëã Ch√†o h·ªèi b·∫°n b√®": "B·∫°n c√≥ th·ªÉ n√≥i: \"Ch√†o b·∫°n, h√¥m nay vui kh√¥ng?\"", "üôã H·ªèi b√†i th·∫ßy c√¥": "B·∫°n th·ª≠ h·ªèi: \"Th·∫ßy/c√¥ ∆°i, ph·∫ßn n√†y em ch∆∞a r√µ ·∫°?\"" } },
        "general": { "neutral_replies": ["M√¨nh ch∆∞a r√µ l·∫Øm, b·∫°n n√≥i c·ª• th·ªÉ h∆°n ƒë∆∞·ª£c kh√¥ng?"], "follow_up_prompt": "B·∫°n mu·ªën ti·∫øp t·ª•c t√¢m s·ª± hay luy·ªán n√≥i chuy·ªán trong l·ªõp n√®?", "end_chat_replies": ["C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª v·ªõi m√¨nh h√¥m nay nha."] },
    }
CONFIG = get_config()

# ========== SESSION STATE ==========
if "page_state" not in st.session_state: st.session_state.page_state = "chat"
if "chat_state" not in st.session_state: st.session_state.chat_state = "main"
if "history" not in st.session_state: st.session_state.history = [{"sender": "bot", "text": "Ch√†o b·∫°n, m√¨nh l√† B·∫°n ƒë·ªìng h√†nh ƒë√¢y! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"}]
if "turns" not in st.session_state: st.session_state.turns = 0

# ========== GEMINI AI (PHI√äN B·∫¢N ƒê√É S·ª¨A L·ªñI V√Ä T·ªêI ∆ØU) ==========
@st.cache_resource
def initialize_gemini():
    if not GENAI_AVAILABLE:
        st.sidebar.warning("Th∆∞ vi·ªán google.generativeai ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.", icon="‚ö†Ô∏è")
        return None

    api_key = st.secrets.get("GOOGLE_API_KEY")
    if not api_key:
        st.sidebar.error("Ch∆∞a c·∫•u h√¨nh `GOOGLE_API_KEY` trong Streamlit Secrets.", icon="üö®")
        return None
    
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-pro")
        model.generate_content("ping", generation_config={"max_output_tokens": 1})
        st.sidebar.success("‚úÖ AI ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!")
        return model
    except Exception as e:
        st.sidebar.error(f"L·ªói k·∫øt n·ªëi Gemini: {e}", icon="üö®")
        return None

gemini_model = initialize_gemini()
AI_ENABLED = gemini_model is not None

if AI_ENABLED and "gemini_chat" not in st.session_state:
    st.session_state.gemini_chat = gemini_model.start_chat(history=[])

def call_gemini(prompt):
    if not AI_ENABLED or not hasattr(st.session_state, 'gemini_chat'):
        return random.choice(CONFIG["general"]["neutral_replies"])
    
    system_prompt = "B·∫°n l√† 'B·∫°n ƒê·ªìng H√†nh', m·ªôt chatbot AI th√¢n thi·ªán, th·∫•u c·∫£m v√† ki√™n nh·∫´n, ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ tr√≤ chuy·ªán v√† h·ªó tr·ª£ tinh th·∫ßn cho h·ªçc sinh. H√£y tr·∫£ l·ªùi m·ªôt c√°ch nh·∫π nh√†ng, t√≠ch c·ª±c v√† ƒë∆°n gi·∫£n."
    full_prompt = f"{system_prompt}\n\nNg∆∞·ªùi d√πng n√≥i: {prompt}"
    
    try:
        response = st.session_state.gemini_chat.send_message(full_prompt)
        return response.text
    except Exception as e:
        st.error(f"L·ªói khi g·ªçi Gemini: {e}")
        return "Xin l·ªói, AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng."

# --- C√ÅC H√ÄM KH√ÅC V√Ä GIAO DI·ªÜN CH√çNH ---
# ... (Ph·∫ßn code c√≤n l·∫°i c·ªßa b·∫°n gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi) ...

# ========== 5) TTS (EDGE TTS NEURAL + FALLBACK GTTS) ==========

def synthesize_tts(text, voice, rate_pct):
    if EDGE_TTS_AVAILABLE:
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
                temp_path = temp_file.name
            rate_str = f"{'+' if rate_pct>=0 else ''}{rate_pct}%"
            cmd = [
                "edge-tts", "--voice", voice, "--rate", rate_str, 
                "--text", text, "--write-media", temp_path
            ]
            subprocess.run(cmd, check=True, capture_output=True, text=True)
            with open(temp_path, 'rb') as f:
                audio_data = f.read()
            os.unlink(temp_path)
            return audio_data
        except Exception as e:
            print(f"L·ªói Edge TTS: {e}. Chuy·ªÉn sang gTTS.")

    if GTTS_AVAILABLE:
        try:
            bio = BytesIO()
            tts = gTTS(text=text, lang="vi")
            tts.write_to_fp(bio)
            bio.seek(0)
            return bio.read()
        except Exception as e:
            print(f"L·ªói gTTS: {e}")
    
    return None

def autoplay_audio(audio_data):
    if audio_data is None:
        return
    try:
        b64 = base64.b64encode(audio_data).decode()
        md = f"""
        <audio autoplay="true">
          <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
        </audio>
        """
        st.components.v1.html(md, height=0)
    except Exception as e:
        print(f"L·ªói ph√°t √¢m thanh: {e}")

# ========== 6) LOGIC CHAT & AI ==========

def add_message(sender, text):
    st.session_state.history.append({"sender": sender, "text": text})

def detect_mood_from_text(text):
    cfg = CONFIG["tam_su"]["moods"]
    lowered = text.lower()
    tokens = set(re.findall(r"\b\w+\b", lowered))
    emojis = {"üòÑ", "üòî"}
    tokens.update(ch for ch in text if ch in emojis)
    best, score = None, 0
    for mood, m_cfg in cfg.items():
        kws = set(m_cfg["keywords"])
        matches = len(tokens.intersection(kws))
        if matches > score:
            best, score = mood, matches
    return best

def respond_bot(text):
    add_message("bot", text)
    if st.session_state.tts_enabled:
        # Kh√¥ng c·∫ßn spinner ·ªü ƒë√¢y v√¨ n√≥ c√≥ th·ªÉ l√†m gi√°n ƒëo·∫°n lu·ªìng UI
        audio = synthesize_tts(text, st.session_state.tts_voice, st.session_state.tts_rate)
        if audio:
            autoplay_audio(audio)

# ========== 7) GIAO DI·ªÜN CH√çNH ==========

with st.sidebar:
    st.markdown("### C√†i ƒë·∫∑t gi·ªçng n√≥i")
    st.session_state.tts_enabled = st.toggle("ƒê·ªçc to ph·∫£n h·ªìi", value=st.session_state.tts_enabled)
    voice = st.selectbox(
        "Gi·ªçng ƒë·ªçc",
        options=["vi-VN-HoaiMyNeural (N·ªØ)", "vi-VN-NamMinhNeural (Nam)"],
        index=0 if "HoaiMy" in st.session_state.tts_voice else 1
    )
    st.session_state.tts_voice = "vi-VN-HoaiMyNeural" if "HoaiMy" in voice else "vi-VN-NamMinhNeural"
    rate = st.slider("T·ªëc ƒë·ªô n√≥i (%)", -50, 50, st.session_state.tts_rate, step=5)
    st.session_state.tts_rate = rate
    
    st.divider()
    
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán"):
        st.session_state.history = [
            {"sender": "bot", "text": "Ch√†o b·∫°n, m√¨nh l√† B·∫°n ƒë·ªìng h√†nh ƒë√¢y! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"}
        ]
        if AI_ENABLED:
            st.session_state.gemini_chat = gemini_model.start_chat(history=[])
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán!")
        st.rerun()

    st.markdown("### Gi·ªõi thi·ªáu")
    st.markdown("""
    **B·∫°n ƒê·ªìng H√†nh** l√† chatbot h·ªó tr·ª£ t√¢m l√Ω v√† k·ªπ nƒÉng giao ti·∫øp cho h·ªçc sinh.
    - L·∫Øng nghe v√† ƒë·ªìng c·∫£m
    - H·ªó tr·ª£ luy·ªán t·∫≠p giao ti·∫øp
    - Ghi nh·∫≠t k√Ω c·∫£m x√∫c
    - H∆∞·ªõng d·∫´n b√†i t·∫≠p th∆∞ gi√£n
    """)
    st.markdown("Phi√™n b·∫£n: 1.5.0 (ƒê√£ t·ªëi ∆∞u)")

# Main chat UI
st.markdown('<div class="chat-shell">', unsafe_allow_html=True)

# Hi·ªÉn th·ªã c√°c tin nh·∫Øn c≈©
for m in st.session_state.history:
    cls_row = "bubble-row bubble-user" if m["sender"] == "user" else "bubble-row"
    cls_msg = "msg msg-user" if m["sender"] == "user" else "msg msg-bot"
    st.markdown(
        f'<div class="{cls_row}"><div class="{cls_msg}">{html.escape(m["text"])}</div></div>',
        unsafe_allow_html=True
    )

# Quick actions v√† options
if st.session_state.chat_state == CHAT_STATE_MAIN:
    quick_actions_col = st.container()
    with quick_actions_col:
        st.markdown('<div class="quick-actions">', unsafe_allow_html=True)
        qa_cols = st.columns(4)
        if qa_cols[0].button("üíñ T√¢m s·ª±", use_container_width=True, key="btn_tam_su"):
            st.session_state.chat_state = CHAT_STATE_TAM_SU_SELECTION
            respond_bot(CONFIG["tam_su"]["intro_message"])
            st.rerun()
        if qa_cols[1].button("üó£Ô∏è Luy·ªán giao ti·∫øp", use_container_width=True, key="btn_giao_tiep"):
            st.session_state.chat_state = CHAT_STATE_GIAO_TIEP_SELECTION_BASIC
            respond_bot(CONFIG["giao_tiep"]["intro_message"])
            st.rerun()
        if qa_cols[2].button("üìì Nh·∫≠t k√Ω", use_container_width=True, key="btn_journal"):
            st.session_state.page_state = STATE_JOURNAL
            st.rerun()
        if qa_cols[3].button("üòå Th∆∞ gi√£n", use_container_width=True, key="btn_relax"):
            st.session_state.page_state = STATE_RELAX
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)

# ... C√°c options kh√°c ...
options_container = st.container()
with options_container:
    if st.session_state.chat_state == CHAT_STATE_TAM_SU_SELECTION:
        moods = list(CONFIG["tam_su"]["moods"].keys())
        cols = st.columns(len(moods))
        for i, mood in enumerate(moods):
            if cols[i].button(mood, key=f"mood_{i}"):
                st.session_state.chat_state = CHAT_STATE_TAM_SU_CHAT
                st.session_state.current_mood = mood
                st.session_state.turns = 0
                respond_bot(CONFIG["tam_su"]["moods"][mood]["initial"])
                st.rerun()
    # ... C√°c elif kh√°c cho c√°c chat_state ... (gi·ªØ nguy√™n nh∆∞ code c≈©)
    elif st.session_state.chat_state == CHAT_STATE_TAM_SU_CHAT:
        st.markdown("#### T√πy ch·ªçn")
        col1, col2 = st.columns(2)
        if col1.button(CONFIG["tam_su"]["positive_affirmation_trigger"], use_container_width=True):
            affirm = random.choice(CONFIG["tam_su"]["positive_affirmations"])
            st.session_state.chat_state = CHAT_STATE_MAIN
            respond_bot(affirm)
            st.rerun()
        if col2.button("üèÅ K·∫øt th√∫c", use_container_width=True):
            st.session_state.chat_state = CHAT_STATE_MAIN
            respond_bot(random.choice(CONFIG["general"]["end_chat_replies"]))
            st.rerun()
    elif st.session_state.chat_state == CHAT_STATE_GIAO_TIEP_SELECTION_BASIC:
        st.markdown("#### T√¨nh hu·ªëng c∆° b·∫£n")
        for scenario in CONFIG["giao_tiep"]["scenarios_basic"].keys():
            if st.button(scenario, use_container_width=True, key=f"scenario_basic_{scenario}"):
                st.session_state.chat_state = CHAT_STATE_GIAO_TIEP_PRACTICE
                st.session_state.current_scenario = scenario
                respond_bot(CONFIG["giao_tiep"]["scenarios_basic"][scenario])
                st.rerun()
    # ... v√† c√°c states c√≤n l·∫°i ...

# Input bar v√† x·ª≠ l√Ω logic
if prompt := st.chat_input(CONFIG["ui"]["input_placeholder"]):
    # 1. Th√™m v√† hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
    add_message("user", prompt)
    st.session_state.turns += 1
    
    # 2. T·∫°o √¥ ch·ªù trong khi bot x·ª≠ l√Ω
    with st.chat_message("assistant"):
        st.markdown(
            '<div class="bubble-row"><div class="typing"><span></span><span></span><span></span></div></div>',
            unsafe_allow_html=True
        )
        
        # 3. Quy·∫øt ƒë·ªãnh c√¢u tr·∫£ l·ªùi c·ªßa bot
        response_text = ""
        if st.session_state.chat_state == CHAT_STATE_TAM_SU_CHAT:
            mood = st.session_state.current_mood
            styles_all = sum(CONFIG["tam_su"]["moods"][mood]["styles"].values(), [])
            response_text = random.choice(styles_all)
            if st.session_state.turns >= 2:
                st.session_state.chat_state = CHAT_STATE_AWAITING_FOLLOWUP
                response_text += f" {CONFIG['general']['follow_up_prompt']}"
        else:
            detected_mood = detect_mood_from_text(prompt)
            if detected_mood:
                st.session_state.chat_state = CHAT_STATE_TAM_SU_CHAT
                st.session_state.current_mood = detected_mood
                st.session_state.turns = 0
                response_text = CONFIG["tam_su"]["moods"][detected_mood]["initial"]
            else:
                # ƒê√¢y l√† l√∫c g·ªçi AI
                response_text = call_gemini(prompt)
                st.session_state.chat_state = CHAT_STATE_AWAITING_FOLLOWUP

        # 4. G·ª≠i c√¢u tr·∫£ l·ªùi c·ªßa bot
        respond_bot(response_text)
        
    # 5. Ch·∫°y l·∫°i script ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi c·ªßa bot
    st.rerun()

st.markdown('</div>', unsafe_allow_html=True)
st.markdown(
    """
<div class="input-bar">
  <div class="input-inner">
    <small style="color:#999">M·∫πo: B·∫°n c√≥ th·ªÉ b·∫•m c√°c g·ª£i √Ω nhanh ph√≠a tr√™n ƒë·ªÉ thao t√°c nhanh h∆°n.</small>
  </div>
</div>
""",
    unsafe_allow_html=True,
)


# ========== 8) ROUTER N·ªòI B·ªò: NH·∫¨T K√ù & TH∆Ø GI√ÉN ==========
# ... (Gi·ªØ nguy√™n to√†n b·ªô code cho render_journal_ui v√† render_relax_ui) ...
def render_journal_ui():
    st.title("üìì Nh·∫≠t K√Ω C·∫£m X√∫c")
    MOOD_FILE = "mood_journal.csv"
    MOOD_OPTIONS = ["üòÑ Vui", "üòî Bu·ªìn", "üò† T·ª©c gi·∫≠n", "üò¥ M·ªát m·ªèi", "üòê B√¨nh th∆∞·ªùng"]
    def load_mood_data():
        try:
            if os.path.exists(MOOD_FILE):
                try:
                    return pd.read_csv(MOOD_FILE)
                except pd.errors.EmptyDataError:
                    pass
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu nh·∫≠t k√Ω: {e}")
        return pd.DataFrame(columns=["Ng√†y", "C·∫£m x√∫c", "Ghi ch√∫"])
    journal_df = load_mood_data()
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown("### H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?")
        with st.form("mood_form"):
            log_date = st.date_input("Ch·ªçn ng√†y", datetime.now())
            selected_mood = st.selectbox("Ch·ªçn c·∫£m x√∫c", MOOD_OPTIONS)
            note = st.text_area("Ghi ch√∫ th√™m (kh√¥ng b·∫Øt bu·ªôc)", height=100)
            submitted = st.form_submit_button("L∆∞u l·∫°i c·∫£m x√∫c", use_container_width=True)
            if submitted:
                try:
                    new_entry = pd.DataFrame(
                        [{"Ng√†y": log_date.strftime("%Y-%m-%d"), "C·∫£m x√∫c": selected_mood, "Ghi ch√∫": note}]
                    )
                    if not journal_df.empty:
                        journal_df["Ng√†y"] = journal_df["Ng√†y"].astype(str)
                        if log_date.strftime("%Y-%m-%d") in journal_df["Ng√†y"].values:
                            st.warning("B·∫°n ƒë√£ ghi l·∫°i c·∫£m x√∫c cho ng√†y n√†y r·ªìi.")
                        else:
                            journal_df = pd.concat([journal_df, new_entry], ignore_index=True)
                            journal_df.to_csv(MOOD_FILE, index=False)
                            st.success("ƒê√£ l∆∞u nh·∫≠t k√Ω c·∫£m x√∫c th√†nh c√¥ng!")
                            st.rerun()
                    else:
                        journal_df = new_entry
                        journal_df.to_csv(MOOD_FILE, index=False)
                        st.success("ƒê√£ l∆∞u nh·∫≠t k√Ω c·∫£m x√∫c ƒë·∫ßu ti√™n!")
                        st.rerun()
                except Exception as e:
                    st.error(f"L·ªói khi l∆∞u nh·∫≠t k√Ω: {e}")
    with col2:
        if not journal_df.empty:
            st.markdown("### Th·ªëng k√™ c·∫£m x√∫c")
            try:
                mood_counts = journal_df["C·∫£m x√∫c"].value_counts()
                st.bar_chart(mood_counts)
            except Exception:
                st.info("Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™.")
    st.markdown("### L·ªãch s·ª≠ c·∫£m x√∫c")
    if not journal_df.empty:
        display_df = journal_df.sort_values(by="Ng√†y", ascending=False).copy()
        display_df.rename(columns={
            "Ng√†y": "üìÖ Ng√†y", 
            "C·∫£m x√∫c": "üòä C·∫£m x√∫c", 
            "Ghi ch√∫": "üìù Ghi ch√∫"
        }, inplace=True)
        st.dataframe(
            display_df,
            use_container_width=True,
            column_config={
                "üìù Ghi ch√∫": st.column_config.TextColumn(
                    "üìù Ghi ch√∫",
                    width="large",
                    help="Nh·ªØng ƒëi·ªÅu b·∫°n ghi l·∫°i"
                )
            },
            hide_index=True
        )
    else:
        st.info("Nh·∫≠t k√Ω c·ªßa b·∫°n c√≤n tr·ªëng. H√£y th√™m m·ªôt m·ª•c nh·∫≠t k√Ω ƒë·∫ßu ti√™n nh√©!")
    if st.button("‚¨ÖÔ∏è Quay l·∫°i tr√≤ chuy·ªán", use_container_width=False, key="back_from_journal"):
        st.session_state.page_state = STATE_CHAT
        st.rerun()

def render_relax_ui():
    st.title("üòå G√≥c Th∆∞ Gi√£n")
    tabs = st.tabs(["üßò H√≠t th·ªü", "üéµ √Çm thanh", "üìã H∆∞·ªõng d·∫´n"])
    with tabs[0]:
        st.markdown("### B√†i t·∫≠p h√≠t th·ªü h·ªôp (4-4-4-4)")
        st.info("K·ªπ thu·∫≠t n√†y gi√∫p gi·∫£m lo √¢u v√† cƒÉng th·∫≥ng b·∫±ng c√°ch ki·ªÉm so√°t nh·ªãp th·ªü.")
        col1, col2 = st.columns([3,1])
        with col1:
            if st.button("B·∫Øt ƒë·∫ßu b√†i t·∫≠p h√≠t th·ªü", key="start_breathing", use_container_width=True):
                placeholder = st.empty()
                for i in range(3):
                    placeholder.warning(f"Chu·∫©n b·ªã... {3-i}")
                    time.sleep(1)
                steps = [
                    ("H√≠t v√†o t·ª´ t·ª´ qua m≈©i", 4),
                    ("Gi·ªØ h∆°i th·ªü", 4),
                    ("Th·ªü ra t·ª´ t·ª´ qua mi·ªáng", 4),
                    ("Ti·∫øp t·ª•c gi·ªØ nh·ªãp tr∆∞·ªõc khi h√≠t v√†o", 4)
                ]
                for cycle in range(3):
                    placeholder.markdown(f"### Chu k·ª≥ {cycle+1}/3")
                    for title, sec in steps:
                        for i in range(sec, 0, -1):
                            placeholder.success(f"{title} ({i}s)")
                            time.sleep(1)
                placeholder.success("‚úÖ Ho√†n th√†nh! B·∫°n c·∫£m th·∫•y th∆∞ gi√£n h∆°n ch∆∞a?")
        with col2:
            st.markdown("**L·ª£i √≠ch:**")
            st.markdown("""
            - Gi·∫£m cƒÉng th·∫≥ng
            - T·∫≠p trung t·ªët h∆°n
            - Ki·ªÉm so√°t lo √¢u
            - C·∫£i thi·ªán gi·∫•c ng·ªß
            """)
    with tabs[1]:
        st.markdown("### √Çm thanh thi√™n nhi√™n gi√∫p th∆∞ gi√£n")
        st.write("H√£y nh·∫•n play v√† th∆∞·ªüng th·ª©c √¢m thanh trong l√∫c h·ªçc t·∫≠p ho·∫∑c ngh·ªâ ng∆°i.")
        col1, col2, col3 = st.columns(3)
        with col1: 
            st.markdown("#### M∆∞a r∆°i nh·∫π nh√†ng")
            st.video("https://www.youtube.com/watch?v=eKFTSSKCzWA")
        with col2: 
            st.markdown("#### S√≥ng bi·ªÉn √™m ƒë·ªÅm")
            st.video("https://www.youtube.com/watch?v=gM_r4c6i25s")
        with col3: 
            st.markdown("#### R·ª´ng nhi·ªát ƒë·ªõi")
            st.video("https://www.youtube.com/watch?v=aIIEI33EUqI")
    with tabs[2]:
        st.markdown("### H∆∞·ªõng d·∫´n th∆∞ gi√£n nhanh")
        st.markdown("""
        #### 1. Th∆∞ gi√£n c∆° b·∫Øp ti·∫øn b·ªô
        1. Ng·ªìi ho·∫∑c n·∫±m tho·∫£i m√°i
        2. Si·∫øt ch·∫∑t b√†n tay th√†nh n·∫Øm ƒë·∫•m trong 5 gi√¢y
        3. Th·∫£ l·ªèng trong 10 gi√¢y
        4. L·∫∑p l·∫°i v·ªõi c√°c nh√≥m c∆° kh√°c: c√°nh tay, vai, m·∫∑t, b·ª•ng, ch√¢n
        #### 2. K·ªπ thu·∫≠t 5-4-3-2-1
        Khi c·∫£m th·∫•y cƒÉng th·∫≥ng, h√£y li·ªát k√™:
        - 5 th·ª© b·∫°n NH√åN th·∫•y
        - 4 th·ª© b·∫°n C√ì TH·ªÇ CH·∫†M v√†o
        - 3 th·ª© b·∫°n NGHE th·∫•y
        - 2 th·ª© b·∫°n NG·ª¨I th·∫•y
        - 1 th·ª© b·∫°n N·∫æM th·∫•y
        K·ªπ thu·∫≠t n√†y gi√∫p k√©o b·∫°n v·ªÅ hi·ªán t·∫°i v√† gi·∫£m lo √¢u.
        """)
    if st.button("‚¨ÖÔ∏è Quay l·∫°i tr√≤ chuy·ªán", use_container_width=False, key="back_from_relax"):
        st.session_state.page_state = STATE_CHAT
        st.rerun()

if st.session_state.page_state == STATE_JOURNAL:
    render_journal_ui()
elif st.session_state.page_state == STATE_RELAX:
    render_relax_ui()



