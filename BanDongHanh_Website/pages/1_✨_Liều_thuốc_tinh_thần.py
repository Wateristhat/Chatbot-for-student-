import streamlit as st
import random
import pandas as pd
from datetime import datetime
import os
import tempfile
from gtts import gTTS
from io import BytesIO
import time

# --- PAGE CONFIG ---
st.set_page_config(
    page_title="‚ú® Li·ªÅu Thu·ªëc Tinh Th·∫ßn",
    page_icon="‚ú®",
    layout="centered"
)

# --- CSS CHUNG + N√öT BACK ---
st.markdown("""
<style>
    .back-btn {
        text-decoration: none;
        font-size: 0.95rem;
        color: #000;
        background: #f1f1f1;
        padding: 0.4rem 0.8rem;
        border-radius: 8px;
    }
    .back-btn:hover { background: #e5e5e5; }
    .page-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("[‚¨Ö V·ªÅ Trang ch·ªß](0_üíñ_Trang_ch·ªß.py)", unsafe_allow_html=True)

# --- CSS V√Ä FONT RI√äNG C·ª¶A TRANG ---
st.markdown("""
<link rel="stylesheet"
 href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;500;600;700&display=swap');
    html, body, [class*="css"] { 
        font-family: 'Quicksand', Arial, sans-serif; 
        font-size: 1.1rem;
    }
    
    /* Giao di·ªán th√¢n thi·ªán v·ªõi m√†u s·∫Øc t∆∞∆°i s√°ng */
    .main-title {
        font-size: 2.5rem;
        font-weight: 700;
        text-align: center;
        background: linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 1rem 0;
        animation: gentle-bounce 2s ease-in-out infinite;
    }
    
    @keyframes gentle-bounce {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-5px); }
    }
    
    /* N√∫t l·ªõn v√† th√¢n thi·ªán */
    .big-friendly-button {
        font-size: 1.4rem !important;
        padding: 1rem 1.5rem !important;
        border-radius: 20px !important;
        margin: 0.5rem 0 !important;
        font-weight: 600 !important;
        border: none !important;
        cursor: pointer !important;
        transition: all 0.3s ease !important;
        text-align: center !important;
        display: block !important;
        width: 100% !important;
    }
    
    .btn-courage {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%) !important;
        color: #333 !important;
        box-shadow: 0 6px 20px rgba(255, 154, 158, 0.4) !important;
    }
    
    .btn-fun {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%) !important;
        color: #333 !important;
        box-shadow: 0 6px 20px rgba(252, 182, 159, 0.4) !important;
    }
    
    .btn-peace {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%) !important;
        color: #333 !important;
        box-shadow: 0 6px 20px rgba(168, 237, 234, 0.4) !important;
    }
    
    .big-friendly-button:hover {
        transform: translateY(-3px) scale(1.02) !important;
        box-shadow: 0 8px 25px rgba(0,0,0,0.2) !important;
    }
    
    /* Card ƒë·ªông vi√™n v·ªõi avatar */
    .encouragement-card {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 30%, #ee9ca7 100%);
        border-radius: 25px;
        padding: 2.5rem 2rem;
        margin: 2rem 0;
        text-align: center;
        box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        animation: card-appear 0.6s ease-out;
        border: 3px solid #fff;
    }
    
    @keyframes card-appear {
        0% { opacity: 0; transform: scale(0.8) translateY(20px); }
        100% { opacity: 1; transform: scale(1) translateY(0); }
    }
    
    .encouragement-avatar {
        font-size: 4rem;
        margin-bottom: 1rem;
        animation: avatar-bounce 2s ease-in-out infinite;
    }
    
    @keyframes avatar-bounce {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-8px) rotate(5deg); }
    }
    
    .encouragement-message {
        font-size: 1.4rem;
        font-weight: 600;
        color: #2c3e50;
        line-height: 1.8;
        margin: 1rem 0;
        text-shadow: 0 1px 3px rgba(255,255,255,0.7);
    }
    
    /* H·ªôp h∆∞·ªõng d·∫´n nh·ªè */
    .guidance-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 20px;
        margin: 1.5rem 0;
        text-align: center;
        font-size: 1.2rem;
        font-weight: 500;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
        animation: gentle-pulse 3s ease-in-out infinite;
    }
    
    @keyframes gentle-pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.02); }
    }
    
    /* Hi·ªáu ·ª©ng bong b√≥ng bay */
    @keyframes bubble-float {
        0% { transform: translateY(0px) rotate(0deg); opacity: 1; }
        100% { transform: translateY(-100px) rotate(360deg); opacity: 0; }
    }
    
    .bubble {
        position: fixed;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.8);
        animation: bubble-float 4s linear infinite;
        z-index: 1000;
    }
    
    /* N√∫t TTS th√¢n thi·ªán */
    .tts-button {
        background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%) !important;
        color: white !important;
        border: none !important;
        padding: 0.8rem 1.5rem !important;
        border-radius: 15px !important;
        font-size: 1.2rem !important;
        font-weight: 600 !important;
        cursor: pointer !important;
        transition: all 0.3s ease !important;
        margin: 0.5rem !important;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4) !important;
    }
    
    .tts-button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6) !important;
    }
    
    /* L·ªç ƒë·ªông vi√™n */
    .encouragement-jar {
        background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(255, 234, 167, 0.4);
    }
    
    /* Hi·ªáu ·ª©ng sao r∆°i */
    @keyframes star-fall {
        0% { transform: translateY(-10px) rotate(0deg); opacity: 1; }
        100% { transform: translateY(100px) rotate(180deg); opacity: 0; }
    }
    
    .falling-star {
        position: fixed;
        color: #ffd700;
        font-size: 2rem;
        animation: star-fall 3s linear infinite;
        z-index: 1000;
    }
    
    /* Responsive cho h·ªçc sinh */
    @media (max-width: 700px) {
        .main-title { font-size: 2rem; }
        .encouragement-message { font-size: 1.2rem; }
        .encouragement-avatar { font-size: 3rem; }
        .big-friendly-button { font-size: 1.2rem !important; padding: 0.8rem 1.2rem !important; }
    }
</style>
""", unsafe_allow_html=True)

# --- TH∆Ø VI·ªÜN N·ªòI DUNG C·∫¢I TI·∫æN ---
MESSAGE_CATEGORIES = {
    "courage": {
        "label": "üêù C·∫ßn C·ªï V≈©",
        "icon": "üêù",
        "color_class": "btn-courage", 
        "messages": [
            {
                "avatar": "üêù",
                "text": "Bee tin r·∫±ng b·∫°n c√≥ th·ªÉ l√†m ƒë∆∞·ª£c! M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu r·∫•t quan tr·ªçng, c·ª© t·ª´ t·ª´ th√¥i nh√©!",
                "name": "Ong Bee"
            },
            {
                "avatar": "ü¶ã", 
                "text": "Gi·ªëng nh∆∞ b∆∞·ªõm v∆∞·ª£t qua k√©n ƒë·ªÉ bay l√™n, b·∫°n c≈©ng ƒëang tr·ªü n√™n m·∫°nh m·∫Ω h∆°n m·ªói ng√†y!",
                "name": "B∆∞·ªõm xinh"
            },
            {
                "avatar": "üåü",
                "text": "B·∫°n l√† ng√¥i sao s√°ng nh·∫•t trong b·∫ßu tr·ªùi! H√£y t·ª± tin t·ªèa s√°ng nh∆∞ ch√≠nh m√¨nh nh√©!",
                "name": "Sao s√°ng"
            },
            {
                "avatar": "üåà",
                "text": "Sau c∆°n m∆∞a s·∫Ω c√≥ c·∫ßu v·ªìng! Nh·ªØng kh√≥ khƒÉn h√¥m nay s·∫Ω l√† ni·ªÅm vui ng√†y mai ƒë·∫•y!",
                "name": "C·∫ßu v·ªìng"
            },
            {
                "avatar": "ü¶Ñ",
                "text": "B·∫°n ƒë·∫∑c bi·ªát nh∆∞ k·ª≥ l√¢n v·∫≠y! Kh√¥ng ai c√≥ th·ªÉ thay th·∫ø ƒë∆∞·ª£c v·ªã tr√≠ c·ªßa b·∫°n ƒë√¢u!",
                "name": "K·ª≥ l√¢n"
            }
        ]
    },
    "fun": {
        "label": "üòä Mu·ªën Vui V·∫ª", 
        "icon": "üòä",
        "color_class": "btn-fun",
        "messages": [
            {
                "avatar": "üêù",
                "text": "Bee k·ªÉ cho b·∫°n nghe nh√©: T·∫°i sao ong lu√¥n vui? V√¨ ong bi·∫øt c√°ch 'bay' kh·ªèi bu·ªìn phi·ªÅn! Hihi!",
                "name": "Ong Bee"
            },
            {
                "avatar": "üêß",
                "text": "B·∫°n c√≥ bi·∫øt chim c√°nh c·ª•t ƒëi b·ªô l·∫Øc l∆∞ ƒë·ªÉ kh√¥ng b·ªã ng√£ kh√¥ng? C≈©ng gi·ªëng b·∫°n v·∫≠y, c·ª© vui v·∫ª ƒëi th√¥i!",
                "name": "Chim c√°nh c·ª•t"
            },
            {
                "avatar": "üê®",
                "text": "G·∫•u koala ng·ªß 20 ti·∫øng/ng√†y m√† v·∫´n h·∫°nh ph√∫c! ƒê√¥i khi ch·∫≠m l·∫°i c≈©ng t·ªët m√†, b·∫°n nh·ªâ?",
                "name": "G·∫•u koala"
            },
            {
                "avatar": "üåª",
                "text": "Hoa h∆∞·ªõng d∆∞∆°ng lu√¥n quay m·∫∑t v·ªÅ ph√≠a m·∫∑t tr·ªùi! H√£y t√¨m nh·ªØng ƒëi·ªÅu t√≠ch c·ª±c n√†o!",
                "name": "Hoa h∆∞·ªõng d∆∞∆°ng"
            },
            {
                "avatar": "üéà",
                "text": "Khinh kh√≠ c·∫ßu bay cao v√¨ ch·ªü ƒë·∫ßy kh√¥ng kh√≠ n√≥ng... t·ª©c l√† ni·ªÅm vui! B·∫°n c≈©ng bay cao th√¥i!",
                "name": "Khinh kh√≠ c·∫ßu"
            }
        ]
    },
    "peace": {
        "label": "ü´ß T√¨m B√¨nh Y√™n",
        "icon": "ü´ß", 
        "color_class": "btn-peace",
        "messages": [
            {
                "avatar": "ü´ß",
                "text": "H√£y th·ªü s√¢u nh∆∞ nh·ªØng bong b√≥ng bay... t·ª´ t·ª´ th√¥i, kh√¥ng v·ªôi ƒë∆∞·ª£c ƒë√¢u. B·∫°n ƒëang l√†m r·∫•t t·ªët.",
                "name": "Bong b√≥ng"
            },
            {
                "avatar": "üåä",
                "text": "Nh∆∞ s√≥ng bi·ªÉn nh·∫π nh√†ng v·ªó b·ªù, h√£y ƒë·ªÉ t√¢m h·ªìn b·∫°n ƒë∆∞·ª£c ngh·ªâ ng∆°i nh√©.",
                "name": "S√≥ng bi·ªÉn"
            },
            {
                "avatar": "üçÉ",
                "text": "L√° c√¢y nh·∫£y m√∫a trong gi√≥ m√† kh√¥ng g√£y. B·∫°n c≈©ng m·ªÅm m·∫°i v√† m·∫°nh m·∫Ω nh∆∞ v·∫≠y.",
                "name": "L√° c√¢y"
            },
            {
                "avatar": "üåô",
                "text": "TrƒÉng tr√≤n hay trƒÉng khuy·∫øt ƒë·ªÅu ƒë·∫πp. B·∫°n l√∫c vui hay bu·ªìn c≈©ng ƒë·ªÅu ƒë√°ng y√™u.",
                "name": "TrƒÉng xinh"
            },
            {
                "avatar": "üïØÔ∏è",
                "text": "Nh∆∞ ng·ªçn n·∫øn nh·ªè trong ƒë√™m t·ªëi, b·∫°n c√≥ s·ª©c m·∫°nh th·∫ßm l·∫∑ng nh∆∞ng r·∫•t ·∫•m √°p.",
                "name": "Ng·ªçn n·∫øn"
            }
        ]
    }
}

# --- SESSION STATE ---
if 'message_category' not in st.session_state:
    st.session_state.message_category = None
if 'current_message' not in st.session_state:
    st.session_state.current_message = {}
if 'show_journal' not in st.session_state:
    st.session_state.show_journal = False
if 'saved_encouragements' not in st.session_state:
    st.session_state.saved_encouragements = []
if 'show_effects' not in st.session_state:
    st.session_state.show_effects = False

# --- TTS FUNCTIONS ---
@st.cache_data
def create_audio_with_tts(text):
    """T·∫°o audio t·ª´ text b·∫±ng gTTS v·ªõi x·ª≠ l√Ω l·ªói nh·∫π nhang"""
    if not text or text.strip() == "":
        return None
    
    try:
        # Ki·ªÉm tra text c√≥ k√Ω t·ª± ti·∫øng Vi·ªát kh√¥ng
        cleaned_text = text.strip()
        if len(cleaned_text) < 3:  # Text qu√° ng·∫Øn
            return None
            
        tts = gTTS(text=cleaned_text, lang='vi', slow=False)
        audio_bytes = BytesIO()
        tts.write_to_fp(audio_bytes)
        audio_bytes.seek(0)
        return audio_bytes.read()
    except Exception as e:
        # Kh√¥ng hi·ªÉn th·ªã l·ªói ƒë·ªè, ch·ªâ th√¥ng b√°o nh·∫π
        st.info(f"üîá Kh√¥ng th·ªÉ t·∫°o √¢m thanh l√∫c n√†y. H√£y th·ª≠ l·∫°i sau nh√©!")
        return None

def play_encouragement_audio(message_data):
    """Ph√°t √¢m thanh cho l·ªùi ƒë·ªông vi√™n"""
    full_text = f"{message_data['name']} n√≥i: {message_data['text']}"
    
    with st.spinner("üéµ Bee ƒëang chu·∫©n b·ªã √¢m thanh cho b·∫°n..."):
        audio_data = create_audio_with_tts(full_text)
        if audio_data:
            st.audio(audio_data, format="audio/mp3")
            # Th√™m hi·ªáu ·ª©ng vui v·∫ª
            st.session_state.show_effects = True
            time.sleep(0.5)
            if random.random() < 0.7:  # 70% kh·∫£ nƒÉng c√≥ hi·ªáu ·ª©ng
                st.balloons()
        else:
            st.info("ü§ó √Çm thanh ƒëang b·∫≠n, nh∆∞ng Bee v·∫´n y√™u b·∫°n!")

# --- HI·ªÜU ·ª®NG ANIMATIONS ---
def show_floating_effects():
    """Hi·ªÉn th·ªã hi·ªáu ·ª©ng bong b√≥ng bay v√† sao r∆°i"""
    if st.session_state.show_effects:
        # JavaScript cho hi·ªáu ·ª©ng
        effects_html = """
        <script>
        function createBubbles() {
            for(let i = 0; i < 5; i++) {
                setTimeout(() => {
                    const bubble = document.createElement('div');
                    bubble.className = 'bubble';
                    bubble.style.left = Math.random() * 100 + '%';
                    bubble.style.width = (Math.random() * 20 + 10) + 'px';
                    bubble.style.height = bubble.style.width;
                    bubble.style.backgroundColor = `hsl(${Math.random() * 360}, 70%, 80%)`;
                    document.body.appendChild(bubble);
                    setTimeout(() => bubble.remove(), 4000);
                }, i * 500);
            }
        }
        
        function createFallingStars() {
            for(let i = 0; i < 3; i++) {
                setTimeout(() => {
                    const star = document.createElement('div');
                    star.innerHTML = '‚≠ê';
                    star.className = 'falling-star';
                    star.style.left = Math.random() * 100 + '%';
                    document.body.appendChild(star);
                    setTimeout(() => star.remove(), 3000);
                }, i * 800);
            }
        }
        
        if (window.showEffects) {
            createBubbles();
            createFallingStars();
        }
        </script>
        """
        st.markdown(effects_html, unsafe_allow_html=True)
        st.markdown('<script>window.showEffects = true;</script>', unsafe_allow_html=True)

# --- H√ÄM X·ª¨ L√ù ---
def select_category(category_key):
    st.session_state.message_category = category_key
    st.session_state.current_message = random.choice(
        MESSAGE_CATEGORIES[category_key]["messages"]
    )

def get_new_message():
    category_key = st.session_state.message_category
    if category_key:
        st.session_state.current_message = random.choice(
            MESSAGE_CATEGORIES[category_key]["messages"]
        )

def save_to_encouragement_jar():
    """L∆∞u ƒë·ªông vi√™n v√†o l·ªç ƒë·ªông vi√™n c√° nh√¢n"""
    if st.session_state.current_message:
        encouragement = {
            "avatar": st.session_state.current_message["avatar"],
            "text": st.session_state.current_message["text"], 
            "name": st.session_state.current_message["name"],
            "category": st.session_state.message_category,
            "saved_time": datetime.now().strftime("%d/%m/%Y %H:%M")
        }
        
        # Ki·ªÉm tra kh√¥ng tr√πng l·∫∑p
        if encouragement not in st.session_state.saved_encouragements:
            st.session_state.saved_encouragements.append(encouragement)
            st.success(f"‚ú® ƒê√£ l∆∞u l·ªùi ƒë·ªông vi√™n t·ª´ {encouragement['name']} v√†o l·ªç ƒë·ªông vi√™n!")
            if random.random() < 0.8:
                st.balloons()
        else:
            st.info("üí´ L·ªùi ƒë·ªông vi√™n n√†y ƒë√£ c√≥ trong l·ªç r·ªìi nh√©!")

# --- H√ÄM X·ª¨ L√ù NH·∫¨T K√ù C·∫¢M X√öC ---
def get_csv_path():
    """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn file mood_journal.csv"""
    return os.path.join(os.path.dirname(__file__), "..", "mood_journal.csv")

def ensure_csv_exists():
    """ƒê·∫£m b·∫£o file CSV t·ªìn t·∫°i v·ªõi header ph√π h·ª£p"""
    csv_path = get_csv_path()
    if not os.path.exists(csv_path):
        # T·∫°o DataFrame v·ªõi header theo y√™u c·∫ßu
        df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
        df.to_csv(csv_path, index=False, encoding='utf-8')
    else:
        # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t header n·∫øu c·∫ßn
        try:
            df = pd.read_csv(csv_path, encoding='utf-8')
            if list(df.columns) != ["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"]:
                # Backup d·ªØ li·ªáu c≈© n·∫øu c√≥
                if not df.empty:
                    backup_path = csv_path.replace('.csv', '_backup.csv')
                    df.to_csv(backup_path, index=False, encoding='utf-8')
                # T·∫°o m·ªõi v·ªõi header ƒë√∫ng
                df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
                df.to_csv(csv_path, index=False, encoding='utf-8')
        except Exception:
            # N·∫øu c√≥ l·ªói, t·∫°o file m·ªõi
            df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
            df.to_csv(csv_path, index=False, encoding='utf-8')

def save_message_to_journal():
    """L∆∞u th√¥ng ƒëi·ªáp hi·ªán t·∫°i v√†o nh·∫≠t k√Ω c·∫£m x√∫c"""
    try:
        ensure_csv_exists()
        csv_path = get_csv_path()
        
        # L·∫•y th√¥ng tin hi·ªán t·∫°i
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_type = "Li·ªÅu thu·ªëc tinh th·∫ßn"
        
        if st.session_state.current_message:
            content = f"{st.session_state.current_message['name']}: {st.session_state.current_message['text']}"
        else:
            content = "Kh√¥ng c√≥ n·ªôi dung"
        
        # ƒê·ªçc file CSV hi·ªán t·∫°i
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        # Th√™m d√≤ng m·ªõi
        new_row = pd.DataFrame({
            "Ng√†y gi·ªù": [current_time],
            "Lo·∫°i": [message_type], 
            "N·ªôi dung": [content]
        })
        
        df = pd.concat([df, new_row], ignore_index=True)
        
        # L∆∞u l·∫°i file
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        st.success("‚úÖ ƒê√£ l∆∞u th√¥ng ƒëi·ªáp v√†o nh·∫≠t k√Ω c·∫£m x√∫c!")
        st.balloons()
        
    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói khi l∆∞u th√¥ng ƒëi·ªáp: {str(e)}")

def show_journal_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ nh·∫≠t k√Ω li·ªÅu thu·ªëc tinh th·∫ßn"""
    try:
        ensure_csv_exists()
        csv_path = get_csv_path()
        
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        # L·ªçc theo lo·∫°i "Li·ªÅu thu·ªëc tinh th·∫ßn"
        filtered_df = df[df["Lo·∫°i"] == "Li·ªÅu thu·ªëc tinh th·∫ßn"]
        
        if filtered_df.empty:
            st.info("üìù Ch∆∞a c√≥ th√¥ng ƒëi·ªáp n√†o ƒë∆∞·ª£c l∆∞u trong nh·∫≠t k√Ω.")
        else:
            st.subheader("üìñ Nh·∫≠t K√Ω Li·ªÅu Thu·ªëc Tinh Th·∫ßn")
            
            # S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
            filtered_df = filtered_df.sort_values("Ng√†y gi·ªù", ascending=False)
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(
                filtered_df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "Ng√†y gi·ªù": st.column_config.DatetimeColumn(
                        "Ng√†y gi·ªù",
                        format="DD/MM/YYYY HH:mm:ss"
                    ),
                    "Lo·∫°i": st.column_config.TextColumn(
                        "Lo·∫°i",
                        width="medium"
                    ),
                    "N·ªôi dung": st.column_config.TextColumn(
                        "N·ªôi dung",
                        width="large"
                    )
                }
            )
            
            st.info(f"üìä T·ªïng c·ªông: {len(filtered_df)} th√¥ng ƒëi·ªáp ƒë√£ l∆∞u")
            
    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói khi ƒë·ªçc nh·∫≠t k√Ω: {str(e)}")

# --- GIAO DI·ªÜN CH√çNH ---
st.markdown("<div class='main-title'>‚ú® Li·ªÅu Thu·ªëc Tinh Th·∫ßn Cho B·∫°n ‚ú®</div>", unsafe_allow_html=True)

# H·ªôp h∆∞·ªõng d·∫´n th√¢n thi·ªán
st.markdown("""
<div class="guidance-box">
    üêù Ch·ªçn ƒëi·ªÅu b·∫°n c·∫ßn nh·∫•t, Bee s·∫Ω g·ª≠i ƒë·ªông vi√™n ph√π h·ª£p! B·∫°n c√≥ th·ªÉ nghe ho·∫∑c l∆∞u l·∫°i nh√©! üåà
</div>
""", unsafe_allow_html=True)

# N√∫t ch·ªçn lo·∫°i th√¥ng ƒëi·ªáp v·ªõi giao di·ªán c·∫£i thi·ªán
st.markdown("### üåü B·∫°n ƒëang c·∫ßn ƒëi·ªÅu g√¨ l√∫c n√†y?")

cols = st.columns(len(MESSAGE_CATEGORIES))
for idx, (key, value) in enumerate(MESSAGE_CATEGORIES.items()):
    with cols[idx]:
        if st.button(
            f"{value['icon']} {value['label']}", 
            key=f"btn_{key}",
            help=f"Nh·∫≠n ƒë·ªông vi√™n v·ªÅ {value['label'].lower()}",
            use_container_width=True
        ):
            select_category(key)
            st.rerun()

st.write("---")

# Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp v·ªõi avatar v√† hi·ªáu ·ª©ng
if st.session_state.current_message and st.session_state.message_category:
    message_data = st.session_state.current_message
    
    # Card ƒë·ªông vi√™n v·ªõi avatar v√† hi·ªáu ·ª©ng
    st.markdown(f"""
    <div class="encouragement-card">
        <div class="encouragement-avatar">{message_data['avatar']}</div>
        <div class="encouragement-message">{message_data['text']}</div>
        <div style="font-size: 1.1rem; color: #7f8c8d; margin-top: 1rem;">
            üíù T·ª´ {message_data['name']} g·ª≠i b·∫°n
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Hi·ªáu ·ª©ng ƒë·ªông khi hi·ªÉn th·ªã
    show_floating_effects()
    
    # C√°c n√∫t t∆∞∆°ng t√°c
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button(
            "üîÑ Nh·∫≠n l·ªùi kh√°c c√πng lo·∫°i",
            key="btn_next_message",
            help="Nh·∫≠n m·ªôt th√¥ng ƒëi·ªáp ƒë·ªông vi√™n kh√°c c√πng lo·∫°i",
            use_container_width=True
        ):
            get_new_message()
            st.rerun()
    
    with col2:
        if st.button(
            "üîä ƒê·ªçc to",
            key="btn_tts",
            help="Nghe l·ªùi ƒë·ªông vi√™n b·∫±ng ti·∫øng Vi·ªát",
            use_container_width=True
        ):
            play_encouragement_audio(message_data)
    
    with col3:
        if st.button(
            "üíù L∆∞u v√†o l·ªç ƒë·ªông vi√™n",
            key="btn_save_jar",
            help="L∆∞u l·ªùi ƒë·ªông vi√™n n√†y ƒë·ªÉ xem l·∫°i sau",
            use_container_width=True
        ):
            save_to_encouragement_jar()

    st.write("")  # Kho·∫£ng c√°ch

    # N√∫t nh·∫≠t k√Ω c·∫£m x√∫c
    col_journal1, col_journal2 = st.columns(2)
    
    with col_journal1:
        if st.button(
            "üìì L∆∞u v√†o nh·∫≠t k√Ω c·∫£m x√∫c",
            key="btn_save_journal",
            help="L∆∞u v√†o nh·∫≠t k√Ω ƒë·ªÉ gi√°o vi√™n c√≥ th·ªÉ xem",
            use_container_width=True
        ):
            save_message_to_journal()
    
    with col_journal2:
        if st.button(
            "üìñ Xem nh·∫≠t k√Ω ƒë√£ l∆∞u", 
            key="btn_view_journal",
            help="Xem l·ªãch s·ª≠ c√°c l·ªùi ƒë·ªông vi√™n ƒë√£ l∆∞u",
            use_container_width=True
        ):
            st.session_state.show_journal = not st.session_state.show_journal

# --- HI·ªÇN TH·ªä L·ªå ƒê·ªòNG VI√äN ---
if st.session_state.saved_encouragements:
    st.write("---")
    st.markdown("### üçØ L·ªç ƒê·ªông Vi√™n C·ªßa B·∫°n")
    
    st.markdown(f"""
    <div class="encouragement-jar">
        <h4 style="text-align: center; margin-bottom: 1rem;">
            üçØ B·∫°n ƒë√£ thu th·∫≠p {len(st.session_state.saved_encouragements)} l·ªùi ƒë·ªông vi√™n!
        </h4>
    </div>
    """, unsafe_allow_html=True)
    
    # Hi·ªÉn th·ªã c√°c l·ªùi ƒë·ªông vi√™n ƒë√£ l∆∞u
    for idx, encouragement in enumerate(reversed(st.session_state.saved_encouragements)):
        with st.container():
            col1, col2, col3 = st.columns([1, 6, 2])
            
            with col1:
                st.markdown(f"<div style='font-size: 2.5rem; text-align: center;'>{encouragement['avatar']}</div>", 
                           unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div style='background: #f8f9fa; padding: 1rem; border-radius: 10px; margin: 0.5rem 0;'>
                    <strong>{encouragement['name']}:</strong><br>
                    {encouragement['text']}<br>
                    <small style='color: #6c757d;'>üíæ {encouragement['saved_time']}</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                if st.button("üîä", key=f"jar_tts_{idx}", help="Nghe l·∫°i l·ªùi ƒë·ªông vi√™n n√†y"):
                    play_encouragement_audio(encouragement)
                
                if st.button("üóëÔ∏è", key=f"jar_remove_{idx}", help="X√≥a kh·ªèi l·ªç ƒë·ªông vi√™n"):
                    st.session_state.saved_encouragements.remove(encouragement)
                    st.success("‚úÖ ƒê√£ x√≥a kh·ªèi l·ªç ƒë·ªông vi√™n!")
                    st.rerun()

# --- HI·ªÇN TH·ªä NH·∫¨T K√ù N·∫æU ƒê∆Ø·ª¢C Y√äU C·∫¶U ---
if st.session_state.show_journal:
    st.write("---")
    show_journal_history()
    
    # N√∫t ƒë√≥ng nh·∫≠t k√Ω
    if st.button("‚ùå ƒê√≥ng nh·∫≠t k√Ω", key="btn_close_journal"):
        st.session_state.show_journal = False
        st.rerun()

# Reset hi·ªáu ·ª©ng sau khi hi·ªÉn th·ªã
if st.session_state.show_effects:
    st.session_state.show_effects = False
