import streamlit as st
import random
import pandas as pd
from datetime import datetime
import os

# --- PAGE CONFIG ---
st.set_page_config(
    page_title="‚ú® Li·ªÅu Thu·ªëc Tinh Th·∫ßn",
    page_icon="‚ú®",
    layout="centered"
)

# --- CSS CHUNG + N√öT BACK ---
st.markdown("""
<style>
    .back-btn {
        text-decoration: none;
        font-size: 0.95rem;
        color: #000;
        background: #f1f1f1;
        padding: 0.4rem 0.8rem;
        border-radius: 8px;
    }
    .back-btn:hover { background: #e5e5e5; }
    .page-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("[‚¨Ö V·ªÅ Trang ch·ªß](0_üíñ_Trang_ch·ªß.py)", unsafe_allow_html=True)

# --- CSS V√Ä FONT RI√äNG C·ª¶A TRANG ---
st.markdown("""
<link rel="stylesheet"
 href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;500;600;700&display=swap');
    html, body, [class*="css"] { font-family: 'Quicksand', Arial, sans-serif; }
    .message-card {
        background: linear-gradient(100deg, #e1ffea 0%, #fff6eb 100%);
        border-radius: 15px; border: 1.5px solid #e3e7ea; padding: 2rem 1.3rem;
        margin: 1.5rem 0; font-size: 1.23rem; text-align: center;
        box-shadow: 0 4px 20px rgba(0,0,0,0.07); animation: popIn 0.5s;
    }
    .category-icon {
        font-size: 2.3rem; margin-bottom: 0.25rem; display:block;
    }
    @keyframes popIn {
        0% { opacity:0; transform:scale(0.8);}
        100% { opacity:1; transform:scale(1);}
    }
    .journal-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
        flex-wrap: wrap;
    }
    .journal-btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }
    .journal-btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
    .journal-btn-secondary {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }
    .journal-btn-secondary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(240, 147, 251, 0.4);
    }
</style>
""", unsafe_allow_html=True)

# --- TH∆Ø VI·ªÜN N·ªòI DUNG ---
MESSAGE_CATEGORIES = {
    "courage": {
        "label": "C·∫ßn C·ªï V≈©",
        "icon": "<i class='fa-solid fa-bullhorn category-icon' style='color:#ff6a00'></i>",
        "messages": [
            "H√¥m nay, t√¥i ch·ªçn b√¨nh y√™n.",
            "T√¥i ƒë·ªß m·∫°nh m·∫Ω ƒë·ªÉ v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch.",
            "T√¥i x·ª©ng ƒë√°ng ƒë∆∞·ª£c y√™u th∆∞∆°ng v√† h·∫°nh ph√∫c.",
            "M·ªói h∆°i th·ªü ƒë·ªÅu mang l·∫°i cho t√¥i s·ª©c m·∫°nh.",
            "T√¥i bi·∫øt ∆°n v√¨ con ng∆∞·ªùi c·ªßa t√¥i ngay b√¢y gi·ªù."
        ]
    },
    "fun": {
        "label": "Mu·ªën Vui V·∫ª",
        "icon": "<i class='fa-solid fa-face-laugh-beam category-icon' style='color:#fbbf24'></i>",
        "messages": [
            "S·ª± th·∫≠t th√∫ v·ªã: R√°i c√° bi·ªÉn th∆∞·ªùng n·∫Øm tay nhau khi ng·ªß ƒë·ªÉ kh√¥ng b·ªã tr√¥i ƒëi m·∫•t.",
            "ƒê·ªë b·∫°n: C√°i g√¨ lu√¥n ·ªü ph√≠a tr∆∞·ªõc b·∫°n, nh∆∞ng b·∫°n kh√¥ng bao gi·ªù th·∫•y ƒë∆∞·ª£c? ... ƒê√≥ l√† t∆∞∆°ng lai!",
            "H√£y m·ªâm c∆∞·ªùi nh√©, v√¨ n·ª• c∆∞·ªùi c·ªßa b·∫°n c√≥ th·ªÉ th·∫Øp s√°ng m·ªôt ng√†y c·ªßa ai ƒë√≥."
        ]
    },
    "peace": {
        "label": "T√¨m B√¨nh Y√™n",
        "icon": "<i class='fa-solid fa-spa category-icon' style='color:#49c5b6'></i>",
        "messages": [
            "H√£y h√≠t m·ªôt h∆°i th·∫≠t s√¢u... v√† th·ªü ra th·∫≠t ch·∫≠m. B·∫°n ƒëang ·ªü ƒë√¢y, ngay b√¢y gi·ªù.",
            "Nh√¨n ra ngo√†i c·ª≠a s·ªï. B·∫°n th·∫•y m√†u xanh n√†o kh√¥ng?",
            "H√£y ch√∫ √Ω ƒë·∫øn c·∫£m gi√°c c·ªßa ƒë√¥i ch√¢n ƒëang ch·∫°m ƒë·∫•t."
        ]
    }
}

# --- SESSION STATE ---
if 'message_category' not in st.session_state:
    st.session_state.message_category = None
if 'current_message' not in st.session_state:
    st.session_state.current_message = ""
if 'show_journal' not in st.session_state:
    st.session_state.show_journal = False

# --- H√ÄM X·ª¨ L√ù ---
def select_category(category_key):
    st.session_state.message_category = category_key
    st.session_state.current_message = random.choice(
        MESSAGE_CATEGORIES[category_key]["messages"]
    )

def get_new_message():
    category_key = st.session_state.message_category
    if category_key:
        st.session_state.current_message = random.choice(
            MESSAGE_CATEGORIES[category_key]["messages"]
        )

# --- H√ÄM X·ª¨ L√ù NH·∫¨T K√ù C·∫¢M X√öC ---
def get_csv_path():
    """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn file mood_journal.csv"""
    return os.path.join(os.path.dirname(__file__), "..", "mood_journal.csv")

def ensure_csv_exists():
    """ƒê·∫£m b·∫£o file CSV t·ªìn t·∫°i v·ªõi header ph√π h·ª£p"""
    csv_path = get_csv_path()
    if not os.path.exists(csv_path):
        # T·∫°o DataFrame v·ªõi header theo y√™u c·∫ßu
        df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
        df.to_csv(csv_path, index=False, encoding='utf-8')
    else:
        # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t header n·∫øu c·∫ßn
        try:
            df = pd.read_csv(csv_path, encoding='utf-8')
            if list(df.columns) != ["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"]:
                # Backup d·ªØ li·ªáu c≈© n·∫øu c√≥
                if not df.empty:
                    backup_path = csv_path.replace('.csv', '_backup.csv')
                    df.to_csv(backup_path, index=False, encoding='utf-8')
                # T·∫°o m·ªõi v·ªõi header ƒë√∫ng
                df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
                df.to_csv(csv_path, index=False, encoding='utf-8')
        except Exception:
            # N·∫øu c√≥ l·ªói, t·∫°o file m·ªõi
            df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
            df.to_csv(csv_path, index=False, encoding='utf-8')

def save_message_to_journal():
    """L∆∞u th√¥ng ƒëi·ªáp hi·ªán t·∫°i v√†o nh·∫≠t k√Ω c·∫£m x√∫c"""
    try:
        ensure_csv_exists()
        csv_path = get_csv_path()
        
        # L·∫•y th√¥ng tin hi·ªán t·∫°i
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_type = "Li·ªÅu thu·ªëc tinh th·∫ßn"
        content = st.session_state.current_message
        
        # ƒê·ªçc file CSV hi·ªán t·∫°i
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        # Th√™m d√≤ng m·ªõi
        new_row = pd.DataFrame({
            "Ng√†y gi·ªù": [current_time],
            "Lo·∫°i": [message_type], 
            "N·ªôi dung": [content]
        })
        
        df = pd.concat([df, new_row], ignore_index=True)
        
        # L∆∞u l·∫°i file
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        st.success("‚úÖ ƒê√£ l∆∞u th√¥ng ƒëi·ªáp v√†o nh·∫≠t k√Ω c·∫£m x√∫c!")
        st.balloons()
        
    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói khi l∆∞u th√¥ng ƒëi·ªáp: {str(e)}")

def show_journal_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ nh·∫≠t k√Ω li·ªÅu thu·ªëc tinh th·∫ßn"""
    try:
        ensure_csv_exists()
        csv_path = get_csv_path()
        
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        # L·ªçc theo lo·∫°i "Li·ªÅu thu·ªëc tinh th·∫ßn"
        filtered_df = df[df["Lo·∫°i"] == "Li·ªÅu thu·ªëc tinh th·∫ßn"]
        
        if filtered_df.empty:
            st.info("üìù Ch∆∞a c√≥ th√¥ng ƒëi·ªáp n√†o ƒë∆∞·ª£c l∆∞u trong nh·∫≠t k√Ω.")
        else:
            st.subheader("üìñ Nh·∫≠t K√Ω Li·ªÅu Thu·ªëc Tinh Th·∫ßn")
            
            # S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
            filtered_df = filtered_df.sort_values("Ng√†y gi·ªù", ascending=False)
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(
                filtered_df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "Ng√†y gi·ªù": st.column_config.DatetimeColumn(
                        "Ng√†y gi·ªù",
                        format="DD/MM/YYYY HH:mm:ss"
                    ),
                    "Lo·∫°i": st.column_config.TextColumn(
                        "Lo·∫°i",
                        width="medium"
                    ),
                    "N·ªôi dung": st.column_config.TextColumn(
                        "N·ªôi dung",
                        width="large"
                    )
                }
            )
            
            st.info(f"üìä T·ªïng c·ªông: {len(filtered_df)} th√¥ng ƒëi·ªáp ƒë√£ l∆∞u")
            
    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói khi ƒë·ªçc nh·∫≠t k√Ω: {str(e)}")

# --- GIAO DI·ªÜN CH√çNH ---
st.markdown("<div class='page-title'>‚ú® Li·ªÅu Thu·ªëc Tinh Th·∫ßn Cho B·∫°n</div>", unsafe_allow_html=True)

st.markdown(
    "<div style='font-size:1.1rem;line-height:1.6;'>"
    "ƒê√¥i khi, ch√∫ng ta ch·ªâ c·∫ßn m·ªôt l·ªùi nh·∫Øc nh·ªü nh·ªè ƒë·ªÉ c·∫£m th·∫•y t·ªët h∆°n.<br>"
    "<b>B·∫°n ƒëang c·∫ßn ƒëi·ªÅu g√¨ l√∫c n√†y?</b>"
    "</div>", unsafe_allow_html=True
)
st.write("---")

# N√∫t ch·ªçn lo·∫°i th√¥ng ƒëi·ªáp
cols = st.columns(len(MESSAGE_CATEGORIES))
for idx, (key, value) in enumerate(MESSAGE_CATEGORIES.items()):
    with cols[idx]:
        st.button(
            label=value["label"],
            on_click=select_category,
            args=(key,),
            key=f"btn_{key}",
            use_container_width=True
        )

st.write("---")

# Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp
if st.session_state.current_message and st.session_state.message_category:
    category_key = st.session_state.message_category
    category_info = MESSAGE_CATEGORIES[category_key]
    
    st.markdown(f"""
    <div class="message-card">
        {category_info['icon']}
        <div>{st.session_state.current_message}</div>
    </div>
    """, unsafe_allow_html=True)

    st.button(
        "üîÑ Nh·∫≠n m·ªôt th√¥ng ƒëi·ªáp kh√°c c√πng lo·∫°i",
        on_click=get_new_message,
        key="btn_next_message",
        use_container_width=True
    )
    
    # --- N√öT NH·∫¨T K√ù C·∫¢M X√öC ---
    st.write("")  # Kho·∫£ng c√°ch
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button(
            "üíæ L∆∞u th√¥ng ƒëi·ªáp n√†y v√†o nh·∫≠t k√Ω c·∫£m x√∫c",
            key="btn_save_journal",
            use_container_width=True
        ):
            save_message_to_journal()
    
    with col2:
        if st.button(
            "üìñ Xem nh·∫≠t k√Ω li·ªÅu thu·ªëc tinh th·∫ßn", 
            key="btn_view_journal",
            use_container_width=True
        ):
            st.session_state.show_journal = not st.session_state.show_journal

    if random.random() < 0.2:
        st.balloons()

# --- HI·ªÇN TH·ªä NH·∫¨T K√ù N·∫æU ƒê∆Ø·ª¢C Y√äU C·∫¶U ---
if st.session_state.show_journal:
    st.write("---")
    show_journal_history()
    
    # N√∫t ƒë√≥ng nh·∫≠t k√Ω
    if st.button("‚ùå ƒê√≥ng nh·∫≠t k√Ω", key="btn_close_journal"):
        st.session_state.show_journal = False
        st.rerun()
