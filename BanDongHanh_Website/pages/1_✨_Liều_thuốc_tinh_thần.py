import streamlit as st
import random
import pandas as pd
from datetime import datetime
import os
import tempfile
import subprocess
import requests
from gtts import gTTS
from io import BytesIO
import time

# Check TTS availability
try:
    from gtts import gTTS
    GTTS_AVAILABLE = True
except ImportError:
    GTTS_AVAILABLE = False

try:
    import edge_tts
    EDGE_TTS_AVAILABLE = True
except ImportError:
    EDGE_TTS_AVAILABLE = False

# --- PAGE CONFIG ---
st.set_page_config(
    page_title="‚ú® Li·ªÅu Thu·ªëc Tinh Th·∫ßn",
    page_icon="‚ú®",
    layout="wide"
)
st.markdown("""
<style>
[data-testid="stSidebar"] {
    min-width: 320px !important;
    max-width: 320px !important;
    width: 320px !important;
}
/* Ch·ªânh font v√† k√≠ch th∆∞·ªõc ch·ªØ sidebar */
[data-testid="stSidebar"] .css-1v0mbdj, 
[data-testid="stSidebar"] .css-1wv5c7b, 
[data-testid="stSidebar"] .css-1v8zqwd, 
[data-testid="stSidebar"] .css-1xcwr2u, 
[data-testid="stSidebar"] .css-15zrgzn {
    font-size: 1.18rem !important;
    font-family: 'Comic Neue', Arial, sans-serif !important;
    font-weight: 700 !important;
}
</style>
""", unsafe_allow_html=True)
st.markdown("""
<style>
    .back-btn {
        text-decoration: none;
        font-size: 0.95rem;
        color: #000;
        background: #f1f1f1;
        padding: 0.4rem 0.8rem;
        border-radius: 8px;
    }
    .back-btn:hover { background: #e5e5e5; }
    .page-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("[‚¨Ö V·ªÅ Trang ch·ªß](0_üíñ_Trang_ch·ªß.py)", unsafe_allow_html=True)

# --- CSS V√Ä FONT RI√äNG C·ª¶A TRANG ---
st.markdown("""
<link rel="stylesheet"
 href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;500;600;700&display=swap');
    html, body, [class*="css"] { 
        font-family: 'Quicksand', Arial, sans-serif; 
        font-size: 1.1rem;
    }
    
    /* Giao di·ªán th√¢n thi·ªán v·ªõi m√†u s·∫Øc t∆∞∆°i s√°ng */
    .main-title {
        font-size: 2.5rem;
        font-weight: 700;
        text-align: center;
        background: linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 1rem 0;
        animation: gentle-bounce 2s ease-in-out infinite;
    }
    
    @keyframes gentle-bounce {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-5px); }
    }
    
    /* N√∫t l·ªõn v√† th√¢n thi·ªán */
    .big-friendly-button {
        font-size: 1.4rem !important;
        padding: 1rem 1.5rem !important;
        border-radius: 20px !important;
        margin: 0.5rem 0 !important;
        font-weight: 600 !important;
        border: none !important;
        cursor: pointer !important;
        transition: all 0.3s ease !important;
        text-align: center !important;
        display: block !important;
        width: 100% !important;
    }
    
    .btn-courage {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%) !important;
        color: #333 !important;
        box-shadow: 0 6px 20px rgba(255, 154, 158, 0.4) !important;
    }
    
    .btn-fun {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%) !important;
        color: #333 !important;
        box-shadow: 0 6px 20px rgba(252, 182, 159, 0.4) !important;
    }
    
    .btn-peace {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%) !important;
        color: #333 !important;
        box-shadow: 0 6px 20px rgba(168, 237, 234, 0.4) !important;
    }
    
    .big-friendly-button:hover {
        transform: translateY(-3px) scale(1.02) !important;
        box-shadow: 0 8px 25px rgba(0,0,0,0.2) !important;
    }
    
    /* Card ƒë·ªông vi√™n v·ªõi avatar */
    .encouragement-card {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 30%, #ee9ca7 100%);
        border-radius: 25px;
        padding: 2.5rem 2rem;
        margin: 2rem 0;
        text-align: center;
        box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        animation: card-appear 0.6s ease-out;
        border: 3px solid #fff;
    }
    
    @keyframes card-appear {
        0% { opacity: 0; transform: scale(0.8) translateY(20px); }
        100% { opacity: 1; transform: scale(1) translateY(0); }
    }
    
    .encouragement-avatar {
        font-size: 4rem;
        margin-bottom: 1rem;
        animation: avatar-bounce 2s ease-in-out infinite;
    }
    
    @keyframes avatar-bounce {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-8px) rotate(5deg); }
    }
    
    .encouragement-message {
        font-size: 1.4rem;
        font-weight: 600;
        color: #2c3e50;
        line-height: 1.8;
        margin: 1rem 0;
        text-shadow: 0 1px 3px rgba(255,255,255,0.7);
    }
    
    /* H·ªôp h∆∞·ªõng d·∫´n nh·ªè */
    .guidance-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 20px;
        margin: 1.5rem 0;
        text-align: center;
        font-size: 1.2rem;
        font-weight: 500;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
        animation: gentle-pulse 3s ease-in-out infinite;
    }
    
    @keyframes gentle-pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.02); }
    }
    
    /* Hi·ªáu ·ª©ng bong b√≥ng bay */
    @keyframes bubble-float {
        0% { transform: translateY(0px) rotate(0deg); opacity: 1; }
        100% { transform: translateY(-100px) rotate(360deg); opacity: 0; }
    }
    
    .bubble {
        position: fixed;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.8);
        animation: bubble-float 4s linear infinite;
        z-index: 1000;
    }
    
    /* N√∫t TTS th√¢n thi·ªán */
    .tts-button {
        background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%) !important;
        color: white !important;
        border: none !important;
        padding: 0.8rem 1.5rem !important;
        border-radius: 15px !important;
        font-size: 1.2rem !important;
        font-weight: 600 !important;
        cursor: pointer !important;
        transition: all 0.3s ease !important;
        margin: 0.5rem !important;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4) !important;
    }
    
    .tts-button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6) !important;
    }
    
    /* L·ªç ƒë·ªông vi√™n */
    .encouragement-jar {
        background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(255, 234, 167, 0.4);
    }
    
    /* Hi·ªáu ·ª©ng sao r∆°i */
    @keyframes star-fall {
        0% { transform: translateY(-10px) rotate(0deg); opacity: 1; }
        100% { transform: translateY(100px) rotate(180deg); opacity: 0; }
    }
    
    .falling-star {
        position: fixed;
        color: #ffd700;
        font-size: 2rem;
        animation: star-fall 3s linear infinite;
        z-index: 1000;
    }
    
    /* Responsive cho h·ªçc sinh */
    @media (max-width: 700px) {
        .main-title { font-size: 2rem; }
        .encouragement-message { font-size: 1.2rem; }
        .encouragement-avatar { font-size: 3rem; }
        .big-friendly-button { font-size: 1.2rem !important; padding: 0.8rem 1.2rem !important; }
    }
</style>
""", unsafe_allow_html=True)

# --- TH∆Ø VI·ªÜN N·ªòI DUNG C·∫¢I TI·∫æN ---
MESSAGE_CATEGORIES = {
    "courage": {
        "label": "üêù C·∫ßn C·ªï V≈©",
        "icon": "üêù",
        "color_class": "btn-courage", 
        "messages": [
            {
                "avatar": "üêù",
                "text": "Bee tin r·∫±ng b·∫°n c√≥ th·ªÉ l√†m ƒë∆∞·ª£c! M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu r·∫•t quan tr·ªçng, c·ª© t·ª´ t·ª´ th√¥i nh√©!",
                "name": "Ong Bee"
            },
            {
                "avatar": "ü¶ã", 
                "text": "Gi·ªëng nh∆∞ b∆∞·ªõm v∆∞·ª£t qua k√©n ƒë·ªÉ bay l√™n, b·∫°n c≈©ng ƒëang tr·ªü n√™n m·∫°nh m·∫Ω h∆°n m·ªói ng√†y!",
                "name": "B∆∞·ªõm xinh"
            },
            {
                "avatar": "üåü",
                "text": "B·∫°n l√† ng√¥i sao s√°ng nh·∫•t trong b·∫ßu tr·ªùi! H√£y t·ª± tin t·ªèa s√°ng nh∆∞ ch√≠nh m√¨nh nh√©!",
                "name": "Sao s√°ng"
            },
            {
                "avatar": "üåà",
                "text": "Sau c∆°n m∆∞a s·∫Ω c√≥ c·∫ßu v·ªìng! Nh·ªØng kh√≥ khƒÉn h√¥m nay s·∫Ω l√† ni·ªÅm vui ng√†y mai ƒë·∫•y!",
                "name": "C·∫ßu v·ªìng"
            },
            {
                "avatar": "ü¶Ñ",
                "text": "B·∫°n ƒë·∫∑c bi·ªát nh∆∞ k·ª≥ l√¢n v·∫≠y! Kh√¥ng ai c√≥ th·ªÉ thay th·∫ø ƒë∆∞·ª£c v·ªã tr√≠ c·ªßa b·∫°n ƒë√¢u!",
                "name": "K·ª≥ l√¢n"
            }
        ]
    },
    "fun": {
        "label": "üòä Mu·ªën Vui V·∫ª", 
        "icon": "üòä",
        "color_class": "btn-fun",
        "messages": [
            {
                "avatar": "üêù",
                "text": "Bee k·ªÉ cho b·∫°n nghe nh√©: T·∫°i sao ong lu√¥n vui? V√¨ ong bi·∫øt c√°ch 'bay' kh·ªèi bu·ªìn phi·ªÅn! Hihi!",
                "name": "Ong Bee"
            },
            {
                "avatar": "üêß",
                "text": "B·∫°n c√≥ bi·∫øt chim c√°nh c·ª•t ƒëi b·ªô l·∫Øc l∆∞ ƒë·ªÉ kh√¥ng b·ªã ng√£ kh√¥ng? C≈©ng gi·ªëng b·∫°n v·∫≠y, c·ª© vui v·∫ª ƒëi th√¥i!",
                "name": "Chim c√°nh c·ª•t"
            },
            {
                "avatar": "üê®",
                "text": "G·∫•u koala ng·ªß 20 ti·∫øng/ng√†y m√† v·∫´n h·∫°nh ph√∫c! ƒê√¥i khi ch·∫≠m l·∫°i c≈©ng t·ªët m√†, b·∫°n nh·ªâ?",
                "name": "G·∫•u koala"
            },
            {
                "avatar": "üåª",
                "text": "Hoa h∆∞·ªõng d∆∞∆°ng lu√¥n quay m·∫∑t v·ªÅ ph√≠a m·∫∑t tr·ªùi! H√£y t√¨m nh·ªØng ƒëi·ªÅu t√≠ch c·ª±c n√†o!",
                "name": "Hoa h∆∞·ªõng d∆∞∆°ng"
            },
            {
                "avatar": "üéà",
                "text": "Khinh kh√≠ c·∫ßu bay cao v√¨ ch·ªü ƒë·∫ßy kh√¥ng kh√≠ n√≥ng... t·ª©c l√† ni·ªÅm vui! B·∫°n c≈©ng bay cao th√¥i!",
                "name": "Khinh kh√≠ c·∫ßu"
            }
        ]
    },
    "peace": {
        "label": "ü´ß T√¨m B√¨nh Y√™n",
        "icon": "ü´ß", 
        "color_class": "btn-peace",
        "messages": [
            {
                "avatar": "ü´ß",
                "text": "H√£y th·ªü s√¢u nh∆∞ nh·ªØng bong b√≥ng bay... t·ª´ t·ª´ th√¥i, kh√¥ng v·ªôi ƒë∆∞·ª£c ƒë√¢u. B·∫°n ƒëang l√†m r·∫•t t·ªët.",
                "name": "Bong b√≥ng"
            },
            {
                "avatar": "üåä",
                "text": "Nh∆∞ s√≥ng bi·ªÉn nh·∫π nh√†ng v·ªó b·ªù, h√£y ƒë·ªÉ t√¢m h·ªìn b·∫°n ƒë∆∞·ª£c ngh·ªâ ng∆°i nh√©.",
                "name": "S√≥ng bi·ªÉn"
            },
            {
                "avatar": "üçÉ",
                "text": "L√° c√¢y nh·∫£y m√∫a trong gi√≥ m√† kh√¥ng g√£y. B·∫°n c≈©ng m·ªÅm m·∫°i v√† m·∫°nh m·∫Ω nh∆∞ v·∫≠y.",
                "name": "L√° c√¢y"
            },
            {
                "avatar": "üåô",
                "text": "TrƒÉng tr√≤n hay trƒÉng khuy·∫øt ƒë·ªÅu ƒë·∫πp. B·∫°n l√∫c vui hay bu·ªìn c≈©ng ƒë·ªÅu ƒë√°ng y√™u.",
                "name": "TrƒÉng xinh"
            },
            {
                "avatar": "üïØÔ∏è",
                "text": "Nh∆∞ ng·ªçn n·∫øn nh·ªè trong ƒë√™m t·ªëi, b·∫°n c√≥ s·ª©c m·∫°nh th·∫ßm l·∫∑ng nh∆∞ng r·∫•t ·∫•m √°p.",
                "name": "Ng·ªçn n·∫øn"
            }
        ]
    }
}

# --- SESSION STATE ---
if 'message_category' not in st.session_state:
    st.session_state.message_category = None
if 'current_message' not in st.session_state:
    st.session_state.current_message = {}
if 'show_journal' not in st.session_state:
    st.session_state.show_journal = False
if 'saved_encouragements' not in st.session_state:
    st.session_state.saved_encouragements = []
if 'show_effects' not in st.session_state:
    st.session_state.show_effects = False

# --- ENHANCED TTS FUNCTIONS ---

def check_network_connectivity():
    """Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ƒë·ªÉ s·ª≠ d·ª•ng TTS online"""
    try:
        response = requests.get("https://translate.google.com", timeout=3)
        return response.status_code == 200
    except (requests.exceptions.ConnectionError, requests.exceptions.Timeout):
        return False
    except Exception:
        return False

def check_file_permissions():
    """Ki·ªÉm tra quy·ªÅn ghi file t·∫°m th·ªùi"""
    try:
        # Th·ª≠ t·∫°o file t·∫°m trong th∆∞ m·ª•c temp
        with tempfile.NamedTemporaryFile(delete=True) as tmp_file:
            tmp_file.write(b"test")
            return True
    except Exception:
        return False

def gtts_with_diagnostics(text):
    """T·∫°o √¢m thanh b·∫±ng gTTS v·ªõi ch·∫©n ƒëo√°n l·ªói chi ti·∫øt v√† logging"""
    if not GTTS_AVAILABLE:
        print(f"[DEBUG - TTS] gTTS kh√¥ng c√≥ s·∫µn trong h·ªá th·ªëng")  # Log cho dev/admin
        return None, "gtts_not_available"
    
    # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng tr∆∞·ªõc
    if not check_network_connectivity():
        print(f"[DEBUG - TTS] Kh√¥ng th·ªÉ k·∫øt n·ªëi internet")  # Log cho dev/admin
        return None, "network_error"
    
    # Ki·ªÉm tra quy·ªÅn ghi file
    if not check_file_permissions():
        print(f"[DEBUG - TTS] Kh√¥ng c√≥ quy·ªÅn ghi file t·∫°m th·ªùi")  # Log cho dev/admin
        return None, "file_permission_error"
    
    try:
        audio_bytes = BytesIO()
        tts = gTTS(text=text.strip(), lang='vi', slow=False)
        tts.write_to_fp(audio_bytes)
        audio_bytes.seek(0)
        audio_data = audio_bytes.read()
        
        if audio_data and len(audio_data) > 0:
            print(f"[DEBUG - TTS] T·∫°o √¢m thanh th√†nh c√¥ng v·ªõi gTTS, k√≠ch th∆∞·ªõc: {len(audio_data)} bytes")  # Log cho dev/admin
            return audio_data, "success"
        else:
            print(f"[DEBUG - TTS] gTTS kh√¥ng t·∫°o ƒë∆∞·ª£c d·ªØ li·ªáu √¢m thanh")  # Log cho dev/admin
            return None, "no_audio_generated"
            
    except Exception as e:
        error_str = str(e).lower()
        print(f"[DEBUG - TTS] L·ªói gTTS: {str(e)}")  # Log chi ti·∫øt cho dev/admin
        
        if "connection" in error_str or "network" in error_str:
            return None, "network_error"
        elif "timeout" in error_str:
            return None, "timeout_error"
        elif "forbidden" in error_str or "403" in error_str:
            return None, "access_blocked"
        elif "503" in error_str or "502" in error_str or "500" in error_str:
            return None, "server_error"
        else:
            return None, f"unknown_error: {str(e)}"

def edge_tts_with_diagnostics(text, voice="vi-VN-HoaiMyNeural", rate=0):
    """T·∫°o √¢m thanh b·∫±ng Edge TTS v·ªõi ch·∫©n ƒëo√°n l·ªói chi ti·∫øt"""
    if not EDGE_TTS_AVAILABLE:
        print(f"[DEBUG - TTS] Edge TTS kh√¥ng c√≥ s·∫µn trong h·ªá th·ªëng")  # Log cho dev/admin
        return None, "edge_tts_not_available"
    
    try:
        # T·∫°o file t·∫°m th·ªùi
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
            temp_path = temp_file.name
        
        # T·∫°o l·ªánh Edge TTS
        rate_str = f"{'+' if rate >= 0 else ''}{rate}%"
        cmd = [
            "edge-tts",
            "--voice", voice,
            "--rate", rate_str,
            "--text", text,
            "--write-media", temp_path
        ]
        
        print(f"[DEBUG - TTS] Ch·∫°y l·ªánh Edge TTS: {' '.join(cmd)}")  # Log cho dev/admin
        
        # Ch·∫°y l·ªánh
        result = subprocess.run(cmd, check=True, capture_output=True, timeout=10)
        
        # ƒê·ªçc d·ªØ li·ªáu √¢m thanh
        if os.path.exists(temp_path) and os.path.getsize(temp_path) > 0:
            with open(temp_path, 'rb') as f:
                audio_data = f.read()
            
            # X√≥a file t·∫°m th·ªùi
            try:
                os.unlink(temp_path)
            except:
                pass
            
            print(f"[DEBUG - TTS] T·∫°o √¢m thanh th√†nh c√¥ng v·ªõi Edge TTS, k√≠ch th∆∞·ªõc: {len(audio_data)} bytes")  # Log cho dev/admin
            return audio_data, "success"
        else:
            print(f"[DEBUG - TTS] Edge TTS kh√¥ng t·∫°o ƒë∆∞·ª£c file √¢m thanh")  # Log cho dev/admin
            return None, "no_audio_file_generated"
            
    except subprocess.TimeoutExpired:
        print(f"[DEBUG - TTS] Edge TTS timeout")  # Log cho dev/admin
        return None, "edge_tts_timeout"
    except subprocess.CalledProcessError as e:
        print(f"[DEBUG - TTS] Edge TTS command error: {e.returncode}")  # Log cho dev/admin
        return None, f"edge_tts_command_error: {e.returncode}"
    except FileNotFoundError:
        print(f"[DEBUG - TTS] Edge TTS ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")  # Log cho dev/admin
        return None, "edge_tts_not_installed"
    except Exception as e:
        print(f"[DEBUG - TTS] L·ªói Edge TTS: {str(e)}")  # Log cho dev/admin
        return None, f"edge_tts_error: {str(e)}"

@st.cache_data
def create_audio_with_tts_enhanced(text):
    """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi h·ªá th·ªëng ch·∫©n ƒëo√°n v√† fallback"""
    # Ki·ªÉm tra text ƒë·∫ßu v√†o
    if not text or not text.strip():
        print(f"[DEBUG - TTS] Text r·ªóng ho·∫∑c ch·ªâ c√≥ kho·∫£ng tr·∫Øng")  # Log cho dev/admin
        return None, "empty_text"
    
    text = text.strip()
    if len(text) < 3:  # TƒÉng ƒë·ªô d√†i t·ªëi thi·ªÉu l√™n 3 cho ti·∫øng Vi·ªát
        print(f"[DEBUG - TTS] Text qu√° ng·∫Øn: '{text}' (ƒë·ªô d√†i: {len(text)})")  # Log cho dev/admin
        return None, "text_too_short"
    
    print(f"[DEBUG - TTS] B·∫Øt ƒë·∫ßu t·∫°o √¢m thanh cho text: '{text[:50]}{'...' if len(text) > 50 else ''}'")  # Log cho dev/admin
    
    # Th·ª≠ Edge TTS tr∆∞·ªõc (kh√¥ng c·∫ßn internet)
    if EDGE_TTS_AVAILABLE:
        print(f"[DEBUG - TTS] Th·ª≠ Edge TTS tr∆∞·ªõc...")  # Log cho dev/admin
        audio_data, error_code = edge_tts_with_diagnostics(text)
        if audio_data:
            return audio_data, "success_edge_tts"
    
    # Fallback sang gTTS (c·∫ßn internet)
    if GTTS_AVAILABLE:
        print(f"[DEBUG - TTS] Fallback sang gTTS...")  # Log cho dev/admin
        audio_data, error_code = gtts_with_diagnostics(text)
        if audio_data:
            return audio_data, "success_gtts"
        else:
            return None, error_code
    
    print(f"[DEBUG - TTS] Kh√¥ng c√≥ TTS engine n√†o kh·∫£ d·ª•ng")  # Log cho dev/admin
    return None, "no_tts_available"

def get_error_message(error_code):
    """Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói th√¢n thi·ªán cho h·ªçc sinh"""
    error_messages = {
        "empty_text": "üí≠ Ch∆∞a c√≥ n·ªôi dung ƒë·ªÉ ƒë·ªçc. H√£y th·ª≠ l·∫°i khi c√≥ vƒÉn b·∫£n!",
        "text_too_short": "üí≠ N·ªôi dung qu√° ng·∫Øn ƒë·ªÉ t·∫°o √¢m thanh. H√£y th√™m v√†i t·ª´ n·ªØa nh√©!",
        "network_error": "üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi internet ƒë·ªÉ t·∫°o √¢m thanh. H√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i sau nh√©!",
        "timeout_error": "‚è∞ K·∫øt n·ªëi qu√° ch·∫≠m. H√£y th·ª≠ l·∫°i sau v√†i gi√¢y ho·∫∑c ki·ªÉm tra t·ªëc ƒë·ªô m·∫°ng!",
        "access_blocked": "üö´ D·ªãch v·ª• t·∫°o √¢m thanh t·∫°m th·ªùi b·ªã ch·∫∑n. H√£y th·ª≠ l·∫°i sau ho·∫∑c d√πng tr√¨nh duy·ªát kh√°c!",
        "server_error": "üîß M√°y ch·ªß t·∫°o √¢m thanh ƒëang b·∫£o tr√¨. H√£y th·ª≠ l·∫°i sau 5-10 ph√∫t nh√©!",
        "file_permission_error": "üìÅ Kh√¥ng th·ªÉ t·∫°o file √¢m thanh t·∫°m th·ªùi. H√£y th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£!",
        "no_tts_available": "üîä T√≠nh nƒÉng ƒë·ªçc to hi·ªán kh√¥ng kh·∫£ d·ª•ng. B·∫°n c√≥ th·ªÉ ƒë·ªçc n·ªôi dung ·ªü tr√™n nh√©!",
        "gtts_not_available": "üéµ D·ªãch v·ª• t·∫°o √¢m thanh Google kh√¥ng kh·∫£ d·ª•ng.",
        "edge_tts_not_available": "üéµ Edge TTS kh√¥ng c√≥ s·∫µn",
        "edge_tts_timeout": "‚è∞ T·∫°o √¢m thanh m·∫•t qu√° nhi·ªÅu th·ªùi gian. H√£y th·ª≠ l·∫°i!",
        "edge_tts_not_installed": "üîß Ch∆∞a c√†i ƒë·∫∑t c√¥ng c·ª• t·∫°o gi·ªçng n√≥i. H√£y li√™n h·ªá qu·∫£n tr·ªã vi√™n!",
        "no_audio_generated": "‚ùå Kh√¥ng th·ªÉ t·∫°o √¢m thanh. H√£y th·ª≠ l·∫°i v·ªõi n·ªôi dung kh√°c!",
        "no_audio_file_generated": "‚ùå Kh√¥ng th·ªÉ t·∫°o file √¢m thanh. H√£y th·ª≠ l·∫°i!",
    }
    
    # X·ª≠ l√Ω l·ªói c√≥ prefix
    if error_code.startswith("unknown_error:"):
        return "üîç C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra. H√£y th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£!"
    elif error_code.startswith("edge_tts_error:"):
        return "üéµ C√≥ l·ªói khi t·∫°o gi·ªçng n√≥i. H√£y th·ª≠ l·∫°i sau!"
    elif error_code.startswith("edge_tts_command_error:"):
        return "üîß L·ªánh t·∫°o gi·ªçng n√≥i g·∫∑p l·ªói. H√£y th·ª≠ l·∫°i ho·∫∑c kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng!"
    
    return error_messages.get(error_code, f"üîä Hi·ªán t·∫°i kh√¥ng th·ªÉ t·∫°o √¢m thanh. B·∫°n c√≥ th·ªÉ ƒë·ªçc n·ªôi dung ·ªü tr√™n nh√©!")

# Gi·ªØ l·∫°i h√†m c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
@st.cache_data
def create_audio_with_tts(text):
    """H√†m TTS c≈© - chuy·ªÉn sang phi√™n b·∫£n c·∫£i ti·∫øn"""
    audio_data, result_code = create_audio_with_tts_enhanced(text)
    return audio_data if audio_data else None

# H√†m debug ƒë∆°n gi·∫£n cho server admin
def tts_debug_test():
    """H√†m test ƒë∆°n gi·∫£n ƒë·ªÉ debug TTS cho server admin"""
    test_text = "Xin ch√†o, ƒë√¢y l√† b√†i test √¢m thanh ti·∫øng Vi·ªát."
    
    st.markdown("### üîß TTS Debug Test (D√†nh cho Admin)")
    st.info("C√¥ng c·ª• n√†y gi√∫p admin ki·ªÉm tra t√¨nh tr·∫°ng TTS system")
    
    if st.button("üß™ Ch·∫°y test TTS"):
        st.markdown("#### Th√¥ng tin h·ªá th·ªëng:")
        st.write(f"- gTTS kh·∫£ d·ª•ng: {GTTS_AVAILABLE}")
        st.write(f"- Edge TTS kh·∫£ d·ª•ng: {EDGE_TTS_AVAILABLE}")
        st.write(f"- K·∫øt n·ªëi m·∫°ng: {check_network_connectivity()}")
        st.write(f"- Quy·ªÅn ghi file: {check_file_permissions()}")
        
        st.markdown("#### Test t·∫°o √¢m thanh:")
        with st.spinner("ƒêang test..."):
            audio_data, result_code = create_audio_with_tts_enhanced(test_text)
            
            if audio_data:
                st.success(f"‚úÖ T·∫°o √¢m thanh th√†nh c√¥ng! ({result_code})")
                st.audio(audio_data, format="audio/mp3")
            else:
                st.error(f"‚ùå L·ªói: {result_code}")
                st.info(get_error_message(result_code))

def play_encouragement_audio(message_data):
    """Ph√°t √¢m thanh cho l·ªùi ƒë·ªông vi√™n v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    full_text = f"{message_data['name']} n√≥i: {message_data['text']}"
    
    with st.spinner("üéµ Bee ƒëang chu·∫©n b·ªã √¢m thanh cho b·∫°n..."):
        audio_data, result_code = create_audio_with_tts_enhanced(full_text)
        
        if audio_data and result_code.startswith("success"):
            # Hi·ªÉn th·ªã th√¥ng tin th√†nh c√¥ng nh·∫π nh√†ng
            if "edge_tts" in result_code:
                st.success("üéµ ƒê√£ t·∫°o √¢m thanh b·∫±ng gi·ªçng n√≥i t·ª± nhi√™n!")
            else:
                st.success("üéµ ƒê√£ t·∫°o √¢m thanh cho b·∫°n!")
            
            # Ph√°t √¢m thanh
            st.audio(audio_data, format="audio/mp3")
            
            # Th√™m hi·ªáu ·ª©ng vui v·∫ª
            st.session_state.show_effects = True
            time.sleep(0.5)
            if random.random() < 0.7:  # 70% kh·∫£ nƒÉng c√≥ hi·ªáu ·ª©ng
                st.balloons()
        else:
            # Hi·ªÉn th·ªã l·ªói th√¢n thi·ªán v·ªõi h∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c
            error_msg = get_error_message(result_code)
            
            # S·ª≠ d·ª•ng st.info ho·∫∑c st.warning thay v√¨ st.error ƒë·ªÉ kh√¥ng l√†m h·ªçc sinh s·ª£ h√£i
            if "network" in result_code.lower():
                st.warning(error_msg)
                st.info("üí° **G·ª£i √Ω**: Ki·ªÉm tra k·∫øt n·ªëi WiFi/4G ‚Üí T·∫£i l·∫°i trang ‚Üí Th·ª≠ l·∫°i")
            elif "timeout" in result_code.lower():
                st.info(error_msg)  
                st.info("üí° **G·ª£i √Ω**: ƒê·ª£i 5 gi√¢y ‚Üí Th·ª≠ l·∫°i ‚Üí Ho·∫∑c s·ª≠ d·ª•ng m·∫°ng kh√°c")
            elif "blocked" in result_code.lower() or "403" in result_code:
                st.info(error_msg)
                st.info("üí° **G·ª£i √Ω**: Th·ª≠ tr√¨nh duy·ªát kh√°c (Chrome/Firefox) ‚Üí T·∫Øt VPN ‚Üí Th·ª≠ l·∫°i")
            elif "server" in result_code.lower():
                st.info(error_msg)
                st.info("üí° **G·ª£i √Ω**: ƒê·ª£i 10 ph√∫t ‚Üí Th·ª≠ l·∫°i ‚Üí L·ªói t·ª´ nh√† cung c·∫•p d·ªãch v·ª•")
            else:
                st.info(error_msg)
            
            # Th√™m th√¥ng ƒëi·ªáp ƒë·ªông vi√™n khi g·∫∑p l·ªói
            st.info("ü§ó √Çm thanh ƒëang b·∫≠n, nh∆∞ng Bee v·∫´n y√™u b·∫°n! B·∫°n c√≥ th·ªÉ ƒë·ªçc n·ªôi dung ·ªü tr√™n nh√©!")

# --- HI·ªÜU ·ª®NG ANIMATIONS ---
def show_floating_effects():
    """Hi·ªÉn th·ªã hi·ªáu ·ª©ng bong b√≥ng bay v√† sao r∆°i"""
    if st.session_state.show_effects:
        # JavaScript cho hi·ªáu ·ª©ng ƒë·ªông
        effects_html = f"""
        <script>
        function createBubbles() {{
            for(let i = 0; i < 6; i++) {{
                setTimeout(() => {{
                    const bubble = document.createElement('div');
                    bubble.innerHTML = '{random.choice(["ü´ß", "üí´", "‚ú®", "üåü", "üéà", "üíé"])}';
                    bubble.style.position = 'fixed';
                    bubble.style.left = Math.random() * 100 + '%';
                    bubble.style.fontSize = (Math.random() * 1.5 + 1) + 'rem';
                    bubble.style.zIndex = '9999';
                    bubble.style.pointerEvents = 'none';
                    bubble.style.animation = 'bubble-float 4s ease-out forwards';
                    document.body.appendChild(bubble);
                    setTimeout(() => bubble.remove(), 4000);
                }}, i * 300);
            }}
        }}
        
        function createFallingStars() {{
            for(let i = 0; i < 4; i++) {{
                setTimeout(() => {{
                    const star = document.createElement('div');
                    star.innerHTML = '{random.choice(["‚≠ê", "üåü", "‚ú®", "üí´"])}';
                    star.style.position = 'fixed';
                    star.style.left = Math.random() * 100 + '%';
                    star.style.fontSize = '1.8rem';
                    star.style.zIndex = '9999';
                    star.style.pointerEvents = 'none';
                    star.style.animation = 'star-fall 3s ease-in forwards';
                    document.body.appendChild(star);
                    setTimeout(() => star.remove(), 3000);
                }}, i * 600);
            }}
        }}
        
        function createFlyingBee() {{
            const bee = document.createElement('div');
            bee.innerHTML = 'üêù';
            bee.style.position = 'fixed';
            bee.style.fontSize = '2rem';
            bee.style.zIndex = '9999';
            bee.style.pointerEvents = 'none';
            bee.style.left = '-50px';
            bee.style.top = Math.random() * 50 + 30 + '%';
            bee.style.animation = 'bee-fly 8s linear forwards';
            document.body.appendChild(bee);
            setTimeout(() => bee.remove(), 8000);
        }}
        
        // Th√™m CSS animations n·∫øu ch∆∞a c√≥
        if (!document.getElementById('magic-animations')) {{
            const style = document.createElement('style');
            style.id = 'magic-animations';
            style.textContent = `
                @keyframes bubble-float {{
                    0% {{ transform: translateY(0) rotate(0deg) scale(1); opacity: 0.8; }}
                    50% {{ transform: translateY(-50vh) rotate(180deg) scale(1.2); opacity: 1; }}
                    100% {{ transform: translateY(-100vh) rotate(360deg) scale(0.8); opacity: 0; }}
                }}
                @keyframes star-fall {{
                    0% {{ transform: translateY(-10px) translateX(0) rotate(0deg); opacity: 1; }}
                    100% {{ transform: translateY(100vh) translateX(50px) rotate(360deg); opacity: 0; }}
                }}
                @keyframes bee-fly {{
                    0% {{ transform: translateX(0) translateY(0) rotate(0deg); }}
                    25% {{ transform: translateX(25vw) translateY(-20px) rotate(10deg); }}
                    50% {{ transform: translateX(50vw) translateY(10px) rotate(-5deg); }}
                    75% {{ transform: translateX(75vw) translateY(-15px) rotate(8deg); }}
                    100% {{ transform: translateX(100vw) translateY(0) rotate(0deg); }}
                }}
            `;
            document.head.appendChild(style);
        }}
        
        // Ch·∫°y hi·ªáu ·ª©ng
        setTimeout(createBubbles, 500);
        setTimeout(createFallingStars, 1000);
        setTimeout(createFlyingBee, 1500);
        </script>
        """
        st.markdown(effects_html, unsafe_allow_html=True)

# --- H√ÄM X·ª¨ L√ù ---
def select_category(category_key):
    st.session_state.message_category = category_key
    st.session_state.current_message = random.choice(
        MESSAGE_CATEGORIES[category_key]["messages"]
    )

def get_new_message():
    category_key = st.session_state.message_category
    if category_key:
        st.session_state.current_message = random.choice(
            MESSAGE_CATEGORIES[category_key]["messages"]
        )

def save_to_encouragement_jar():
    """L∆∞u ƒë·ªông vi√™n v√†o l·ªç ƒë·ªông vi√™n c√° nh√¢n"""
    if st.session_state.current_message:
        encouragement = {
            "avatar": st.session_state.current_message["avatar"],
            "text": st.session_state.current_message["text"], 
            "name": st.session_state.current_message["name"],
            "category": st.session_state.message_category,
            "saved_time": datetime.now().strftime("%d/%m/%Y %H:%M")
        }
        
        # Ki·ªÉm tra kh√¥ng tr√πng l·∫∑p
        if encouragement not in st.session_state.saved_encouragements:
            st.session_state.saved_encouragements.append(encouragement)
            st.success(f"‚ú® ƒê√£ l∆∞u l·ªùi ƒë·ªông vi√™n t·ª´ {encouragement['name']} v√†o l·ªç ƒë·ªông vi√™n!")
            if random.random() < 0.8:
                st.balloons()
        else:
            st.info("üí´ L·ªùi ƒë·ªông vi√™n n√†y ƒë√£ c√≥ trong l·ªç r·ªìi nh√©!")

# --- H√ÄM X·ª¨ L√ù NH·∫¨T K√ù C·∫¢M X√öC ---
def get_csv_path():
    """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn file mood_journal.csv"""
    return os.path.join(os.path.dirname(__file__), "..", "mood_journal.csv")

def ensure_csv_exists():
    """ƒê·∫£m b·∫£o file CSV t·ªìn t·∫°i v·ªõi header ph√π h·ª£p"""
    csv_path = get_csv_path()
    if not os.path.exists(csv_path):
        # T·∫°o DataFrame v·ªõi header theo y√™u c·∫ßu
        df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
        df.to_csv(csv_path, index=False, encoding='utf-8')
    else:
        # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t header n·∫øu c·∫ßn
        try:
            df = pd.read_csv(csv_path, encoding='utf-8')
            if list(df.columns) != ["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"]:
                # Backup d·ªØ li·ªáu c≈© n·∫øu c√≥
                if not df.empty:
                    backup_path = csv_path.replace('.csv', '_backup.csv')
                    df.to_csv(backup_path, index=False, encoding='utf-8')
                # T·∫°o m·ªõi v·ªõi header ƒë√∫ng
                df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
                df.to_csv(csv_path, index=False, encoding='utf-8')
        except Exception:
            # N·∫øu c√≥ l·ªói, t·∫°o file m·ªõi
            df = pd.DataFrame(columns=["Ng√†y gi·ªù", "Lo·∫°i", "N·ªôi dung"])
            df.to_csv(csv_path, index=False, encoding='utf-8')

def save_message_to_journal():
    """L∆∞u th√¥ng ƒëi·ªáp hi·ªán t·∫°i v√†o nh·∫≠t k√Ω c·∫£m x√∫c"""
    try:
        ensure_csv_exists()
        csv_path = get_csv_path()
        
        # L·∫•y th√¥ng tin hi·ªán t·∫°i
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_type = "Li·ªÅu thu·ªëc tinh th·∫ßn"
        
        if st.session_state.current_message:
            content = f"{st.session_state.current_message['name']}: {st.session_state.current_message['text']}"
        else:
            content = "Kh√¥ng c√≥ n·ªôi dung"
        
        # ƒê·ªçc file CSV hi·ªán t·∫°i
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        # Th√™m d√≤ng m·ªõi
        new_row = pd.DataFrame({
            "Ng√†y gi·ªù": [current_time],
            "Lo·∫°i": [message_type], 
            "N·ªôi dung": [content]
        })
        
        df = pd.concat([df, new_row], ignore_index=True)
        
        # L∆∞u l·∫°i file
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        st.success("‚úÖ ƒê√£ l∆∞u th√¥ng ƒëi·ªáp v√†o nh·∫≠t k√Ω c·∫£m x√∫c!")
        st.balloons()
        
    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói khi l∆∞u th√¥ng ƒëi·ªáp: {str(e)}")

def show_journal_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ nh·∫≠t k√Ω li·ªÅu thu·ªëc tinh th·∫ßn v·ªõi th·ªëng k√™ cho gi√°o vi√™n"""
    try:
        ensure_csv_exists()
        csv_path = get_csv_path()
        
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        # L·ªçc theo lo·∫°i "Li·ªÅu thu·ªëc tinh th·∫ßn"
        filtered_df = df[df["Lo·∫°i"] == "Li·ªÅu thu·ªëc tinh th·∫ßn"]
        
        if filtered_df.empty:
            st.info("üìù Ch∆∞a c√≥ th√¥ng ƒëi·ªáp n√†o ƒë∆∞·ª£c l∆∞u trong nh·∫≠t k√Ω.")
        else:
            st.markdown("### üìñ Nh·∫≠t K√Ω Li·ªÅu Thu·ªëc Tinh Th·∫ßn")
            
            # Th·ªëng k√™ cho gi√°o vi√™n
            st.markdown("#### üìä Th·ªëng K√™ S·ª≠ D·ª•ng (D√†nh cho Gi√°o vi√™n)")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üìà T·ªïng l∆∞·ª£t s·ª≠ d·ª•ng", len(filtered_df))
            
            with col2:
                # Ph√¢n t√≠ch lo·∫°i ƒë·ªông vi√™n ƒë∆∞·ª£c d√πng nhi·ªÅu nh·∫•t
                categories_used = []
                for content in filtered_df["N·ªôi dung"]:
                    if "Ong Bee" in content or "B∆∞·ªõm xinh" in content or "Sao s√°ng" in content or "C·∫ßu v·ªìng" in content or "K·ª≥ l√¢n" in content:
                        categories_used.append("C·ªï v≈©")
                    elif "Chim c√°nh c·ª•t" in content or "G·∫•u koala" in content or "Hoa h∆∞·ªõng d∆∞∆°ng" in content or "Khinh kh√≠ c·∫ßu" in content:
                        categories_used.append("Vui v·∫ª") 
                    elif "Bong b√≥ng" in content or "S√≥ng bi·ªÉn" in content or "L√° c√¢y" in content or "TrƒÉng xinh" in content or "Ng·ªçn n·∫øn" in content:
                        categories_used.append("B√¨nh y√™n")
                        
                most_used = max(set(categories_used), key=categories_used.count) if categories_used else "Ch∆∞a c√≥"
                st.metric("üí´ Lo·∫°i ƒë∆∞·ª£c ∆∞a th√≠ch", most_used)
            
            with col3:
                # Ng√†y s·ª≠ d·ª•ng g·∫ßn nh·∫•t
                latest_date = filtered_df["Ng√†y gi·ªù"].max() if not filtered_df.empty else "Ch∆∞a c√≥"
                st.metric("üìÖ S·ª≠ d·ª•ng g·∫ßn nh·∫•t", latest_date[:10] if latest_date != "Ch∆∞a c√≥" else "Ch∆∞a c√≥")
            
            st.write("---")
            
            # S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
            filtered_df = filtered_df.sort_values("Ng√†y gi·ªù", ascending=False)
            
            # Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt
            st.markdown("#### üìã Chi Ti·∫øt S·ª≠ D·ª•ng")
            st.dataframe(
                filtered_df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "Ng√†y gi·ªù": st.column_config.DatetimeColumn(
                        "Ng√†y gi·ªù",
                        format="DD/MM/YYYY HH:mm:ss"
                    ),
                    "Lo·∫°i": st.column_config.TextColumn(
                        "Lo·∫°i",
                        width="medium"
                    ),
                    "N·ªôi dung": st.column_config.TextColumn(
                        "N·ªôi dung",
                        width="large"
                    )
                }
            )
            
            # H∆∞·ªõng d·∫´n cho gi√°o vi√™n
            st.markdown("""
            ---
            ### üë©‚Äçüè´ H∆∞·ªõng D·∫´n Cho Gi√°o Vi√™n
            - **T·∫ßn su·∫•t s·ª≠ d·ª•ng cao**: H·ªçc sinh c√≥ th·ªÉ ƒëang c·∫ßn nhi·ªÅu h·ªó tr·ª£ tinh th·∫ßn
            - **Lo·∫°i "C·ªï v≈©"**: H·ªçc sinh c·∫ßn ƒë·ªông vi√™n v√† kh√≠ch l·ªá
            - **Lo·∫°i "Vui v·∫ª"**: H·ªçc sinh mu·ªën gi·∫£i t·ªèa cƒÉng th·∫≥ng
            - **Lo·∫°i "B√¨nh y√™n"**: H·ªçc sinh c·∫ßn h·ªó tr·ª£ qu·∫£n l√Ω c·∫£m x√∫c v√† stress
            
            üí° *G·ª£i √Ω: N·∫øu h·ªçc sinh s·ª≠ d·ª•ng nhi·ªÅu m·ªôt lo·∫°i ƒë·ªông vi√™n, h√£y tr√≤ chuy·ªán ri√™ng ƒë·ªÉ hi·ªÉu th√™m v·ªÅ t√¨nh h√¨nh c·ªßa em.*
            """)
            
    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói khi ƒë·ªçc nh·∫≠t k√Ω: {str(e)}")

# --- GIAO DI·ªÜN CH√çNH ---
st.markdown("<div class='main-title'>‚ú® Li·ªÅu Thu·ªëc Tinh Th·∫ßn Cho B·∫°n ‚ú®</div>", unsafe_allow_html=True)

# H·ªôp h∆∞·ªõng d·∫´n th√¢n thi·ªán
st.markdown("""
<div class="guidance-box">
    üêù Ch·ªçn ƒëi·ªÅu b·∫°n c·∫ßn nh·∫•t, Bee s·∫Ω g·ª≠i ƒë·ªông vi√™n ph√π h·ª£p! B·∫°n c√≥ th·ªÉ nghe ho·∫∑c l∆∞u l·∫°i nh√©! üåà
</div>
""", unsafe_allow_html=True)

# N√∫t ch·ªçn lo·∫°i th√¥ng ƒëi·ªáp v·ªõi giao di·ªán c·∫£i thi·ªán
st.markdown("### üåü B·∫°n ƒëang c·∫ßn ƒëi·ªÅu g√¨ l√∫c n√†y?")

cols = st.columns(len(MESSAGE_CATEGORIES))
for idx, (key, value) in enumerate(MESSAGE_CATEGORIES.items()):
    with cols[idx]:
        if st.button(
            f"{value['icon']} {value['label']}", 
            key=f"btn_{key}",
            help=f"Nh·∫≠n ƒë·ªông vi√™n v·ªÅ {value['label'].lower()}",
            use_container_width=True
        ):
            select_category(key)
            st.rerun()

st.write("---")

# Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp v·ªõi avatar v√† hi·ªáu ·ª©ng
if st.session_state.current_message and st.session_state.message_category:
    message_data = st.session_state.current_message
    
    # Card ƒë·ªông vi√™n v·ªõi avatar v√† hi·ªáu ·ª©ng
    st.markdown(f"""
    <div class="encouragement-card">
        <div class="encouragement-avatar">{message_data['avatar']}</div>
        <div class="encouragement-message">{message_data['text']}</div>
        <div style="font-size: 1.1rem; color: #7f8c8d; margin-top: 1rem;">
            üíù T·ª´ {message_data['name']} g·ª≠i b·∫°n
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Hi·ªáu ·ª©ng ƒë·ªông khi hi·ªÉn th·ªã
    show_floating_effects()
    
    # C√°c n√∫t t∆∞∆°ng t√°c
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button(
            "üîÑ Nh·∫≠n l·ªùi kh√°c c√πng lo·∫°i",
            key="btn_next_message",
            help="Nh·∫≠n m·ªôt th√¥ng ƒëi·ªáp ƒë·ªông vi√™n kh√°c c√πng lo·∫°i",
            use_container_width=True
        ):
            get_new_message()
            st.rerun()
    
    with col2:
        if st.button(
            "üîä ƒê·ªçc to",
            key="btn_tts",
            help="Nghe l·ªùi ƒë·ªông vi√™n b·∫±ng ti·∫øng Vi·ªát",
            use_container_width=True
        ):
            play_encouragement_audio(message_data)
    
    with col3:
        if st.button(
            "üíù L∆∞u v√†o l·ªç ƒë·ªông vi√™n",
            key="btn_save_jar",
            help="L∆∞u l·ªùi ƒë·ªông vi√™n n√†y ƒë·ªÉ xem l·∫°i sau",
            use_container_width=True
        ):
            save_to_encouragement_jar()

    st.write("")  # Kho·∫£ng c√°ch

    # N√∫t nh·∫≠t k√Ω c·∫£m x√∫c
    col_journal1, col_journal2 = st.columns(2)
    
    with col_journal1:
        if st.button(
            "üìì L∆∞u v√†o nh·∫≠t k√Ω c·∫£m x√∫c",
            key="btn_save_journal",
            help="L∆∞u v√†o nh·∫≠t k√Ω ƒë·ªÉ gi√°o vi√™n c√≥ th·ªÉ xem",
            use_container_width=True
        ):
            save_message_to_journal()
    
    with col_journal2:
        if st.button(
            "üìñ Xem nh·∫≠t k√Ω ƒë√£ l∆∞u", 
            key="btn_view_journal",
            help="Xem l·ªãch s·ª≠ c√°c l·ªùi ƒë·ªông vi√™n ƒë√£ l∆∞u",
            use_container_width=True
        ):
            st.session_state.show_journal = not st.session_state.show_journal

# --- HI·ªÇN TH·ªä L·ªå ƒê·ªòNG VI√äN ---
if st.session_state.saved_encouragements:
    st.write("---")
    st.markdown("### üçØ L·ªç ƒê·ªông Vi√™n C·ªßa B·∫°n")
    
    st.markdown(f"""
    <div class="encouragement-jar">
        <h4 style="text-align: center; margin-bottom: 1rem;">
            üçØ B·∫°n ƒë√£ thu th·∫≠p {len(st.session_state.saved_encouragements)} l·ªùi ƒë·ªông vi√™n!
        </h4>
    </div>
    """, unsafe_allow_html=True)
    
    # Hi·ªÉn th·ªã c√°c l·ªùi ƒë·ªông vi√™n ƒë√£ l∆∞u
    for idx, encouragement in enumerate(reversed(st.session_state.saved_encouragements)):
        with st.container():
            col1, col2, col3 = st.columns([1, 6, 2])
            
            with col1:
                st.markdown(f"<div style='font-size: 2.5rem; text-align: center;'>{encouragement['avatar']}</div>", 
                           unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div style='background: #f8f9fa; padding: 1rem; border-radius: 10px; margin: 0.5rem 0;'>
                    <strong>{encouragement['name']}:</strong><br>
                    {encouragement['text']}<br>
                    <small style='color: #6c757d;'>üíæ {encouragement['saved_time']}</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                if st.button("üîä", key=f"jar_tts_{idx}", help="Nghe l·∫°i l·ªùi ƒë·ªông vi√™n n√†y"):
                    play_encouragement_audio(encouragement)
                
                if st.button("üóëÔ∏è", key=f"jar_remove_{idx}", help="X√≥a kh·ªèi l·ªç ƒë·ªông vi√™n"):
                    st.session_state.saved_encouragements.remove(encouragement)
                    st.success("‚úÖ ƒê√£ x√≥a kh·ªèi l·ªç ƒë·ªông vi√™n!")
                    st.rerun()

# --- HI·ªÇN TH·ªä NH·∫¨T K√ù N·∫æU ƒê∆Ø·ª¢C Y√äU C·∫¶U ---
if st.session_state.show_journal:
    st.write("---")
    show_journal_history()
    
    # N√∫t ƒë√≥ng nh·∫≠t k√Ω
    if st.button("‚ùå ƒê√≥ng nh·∫≠t k√Ω", key="btn_close_journal"):
        st.session_state.show_journal = False
        st.rerun()

# Reset hi·ªáu ·ª©ng sau khi hi·ªÉn th·ªã
if st.session_state.show_effects:
    st.session_state.show_effects = False

# --- ADMIN DEBUG SECTION (·∫®n cho h·ªçc sinh) ---
if 'show_debug' not in st.session_state:
    st.session_state.show_debug = False

# Ch·ªâ hi·ªÉn th·ªã debug khi admin mu·ªën
st.write("---")
with st.expander("üîß Khu v·ª±c Admin/Debug (Ch·ªâ d√†nh cho qu·∫£n tr·ªã vi√™n)", expanded=False):
    st.markdown("""
    **L∆∞u √Ω**: Khu v·ª±c n√†y d√†nh cho gi√°o vi√™n v√† qu·∫£n tr·ªã vi√™n h·ªá th·ªëng ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng TTS.
    H·ªçc sinh c√≥ th·ªÉ b·ªè qua ph·∫ßn n√†y.
    """)
    
    if st.button("üß™ Hi·ªÉn th·ªã Debug Console", key="show_debug_btn"):
        st.session_state.show_debug = not st.session_state.show_debug

    if st.session_state.show_debug:
        tts_debug_test()
