import streamlit as st
from streamlit_drawable_canvas import st_canvas
import random
from datetime import datetime
from gtts import gTTS
from io import BytesIO

st.set_page_config(page_title="üé® B·∫£ng M√†u C·∫£m X√∫c", page_icon="üé®", layout="wide")

# --- CSS giao di·ªán pastel tr·∫£i ngang, ƒë·ªìng b·ªô G√≥c An Y√™n ---
st.markdown("""
<style>
.bmcx-title-feature {
    font-size:2.6rem; font-weight:700; color:#5d3fd3; text-align:center; margin-bottom:1.4rem; margin-top:0.7rem;
    letter-spacing:0.1px; display: flex; align-items: center; justify-content: center; gap: 1.1rem;
}
.bmcx-assist-bigbox {
    background: linear-gradient(120deg,#e0e7ff 0%,#f3e8ff 100%);
    border-radius: 38px; box-shadow: 0 8px 36px rgba(124,77,255,.13);
    padding: 3.2rem 2.8rem 2.1rem 2.8rem; margin-bottom:2.3rem; margin-top:0.2rem;
    text-align: center; border: 3.5px solid #b39ddb; max-width:1700px; margin-left:auto; margin-right:auto;
}
.bmcx-assist-icon {font-size:3.2rem; margin-bottom:0.7rem;}
.bmcx-assist-text {font-size:1.7rem; font-weight:700; color:#6d28d9; margin-bottom:1.1rem;}
.bmcx-assist-btn-row {display:flex; justify-content: center; gap: 56px; margin-top:1.2rem;}
.bmcx-assist-action-btn {
    background: #fff; border: 2.5px solid #b39ddb; border-radius: 17px;
    font-size:1.25rem; font-weight:600; color:#6d28d9;
    padding: 1.1rem 2.5rem; cursor:pointer; box-shadow:0 2px 8px rgba(124,77,255,.14); transition:all 0.18s;
}
.bmcx-assist-action-btn:hover {background:#f3e8ff;}
.bmcx-palette-box {
    background: linear-gradient(120deg,#fffbe7 0%,#e0f7fa 100%);
    border-radius: 36px; box-shadow: 0 8px 36px rgba(124,77,255,.11);
    padding: 2.2rem 1.2rem 1.2rem 1.2rem; margin-bottom:2.2rem; margin-top:0.2rem;
    text-align: center; border: 3px solid #b39ddb; max-width:1200px; margin-left:auto; margin-right:auto;
}
.bmcx-emotion-circle {
    display: flex; flex-direction: column; align-items: center; justify-content: center;
    width: 120px; height: 120px; border-radius: 50%; color: #fff; font-size: 2.3rem; font-weight:700;
    margin: 0 18px 2rem 18px; box-shadow:0 3px 18px rgba(100,100,100,0.13); cursor: pointer;
    transition: all 0.22s; border:4px solid #fff;
}
.bmcx-emotion-circle.selected {
    border: 5px solid #5d3fd3; box-shadow: 0 6px 20px rgba(77,36,175,0.18); transform: scale(1.08);
}
.bmcx-emotion-label {font-size:1.15rem; font-weight:600; color:#222; margin-top:0.6rem;}
.bmcx-note-box {
    background: #f2fcfa; border-radius: 16px; padding: 1.3rem 1.5rem; font-size:1.13rem; color:#555;
    max-width:900px; margin-left:auto; margin-right:auto; margin-bottom:1.1rem; border-left:5px solid #80deea;
}
.bmcx-history-box {
    background: #e3f2fd; border-radius: 14px; padding: 1.05rem 1.2rem; font-size: 1.08rem; color: #333;
    border-left: 5px solid #2196f3; text-align:left; max-width:1200px; margin-left:auto; margin-right:auto; margin-bottom:1rem;
}
.bmcx-footer {
    background:#f3e5f5; border-left:5px solid #ba68c8; border-radius:15px; padding:1rem 1.3rem;
    text-align:center; font-size:1.13rem; margin:0.7rem 0 1rem 0; color:#333; max-width:1200px; margin-left:auto; margin-right:auto;
}
@media (max-width:900px) {
    .bmcx-assist-bigbox, .bmcx-palette-box, .bmcx-history-box, .bmcx-note-box, .bmcx-footer {max-width:96vw;}
    .bmcx-title-feature { font-size:1.3rem; }
    .bmcx-emotion-circle {width:90px;height:90px;font-size:1.4rem;}
}
</style>
""", unsafe_allow_html=True)

# --- Data c·∫£m x√∫c & m√†u ---
EMOTIONS = [
    {
        "label": "Vui v·∫ª",
        "emoji": "üòä",
        "color": "#FFD600",
        "encourage": "H√£y lan t·ªèa n·ª• c∆∞·ªùi c·ªßa b·∫°n t·ªõi m·ªçi ng∆∞·ªùi xung quanh nh√©!"
    },
    {
        "label": "Bu·ªìn",
        "emoji": "üò¢",
        "color": "#64B5F6",
        "encourage": "B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªõi Bee ho·∫∑c b·∫°n b√® ƒë·ªÉ c·∫£m th·∫•y nh·∫π l√≤ng h∆°n."
    },
    {
        "label": "Lo l·∫Øng",
        "emoji": "üò∞",
        "color": "#FF8A65",
        "encourage": "Th·ª≠ h√≠t th·ªü th·∫≠t s√¢u ho·∫∑c nh·∫Øm m·∫Øt l·∫°i m·ªôt ch√∫t nh√©!"
    },
    {
        "label": "T·ª©c gi·∫≠n",
        "emoji": "üò°",
        "color": "#FF1744",
        "encourage": "H√£y th·ª≠ ƒë·∫øm ƒë·∫øn 10 v√† th·ªü th·∫≠t ƒë·ªÅu, Bee lu√¥n ·ªü b√™n b·∫°n!"
    },
    {
        "label": "B√¨nh y√™n",
        "emoji": "üòå",
        "color": "#81C784",
        "encourage": "B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y gi·ªØ t√¢m tr·∫°ng th∆∞ th√°i n√†y nh√©!"
    },
    {
        "label": "H√†o h·ª©ng",
        "emoji": "üéâ",
        "color": "#AB47BC",
        "encourage": "H√£y t·∫≠n d·ª•ng nƒÉng l∆∞·ª£ng t√≠ch c·ª±c ƒë·ªÉ s√°ng t·∫°o v√† vui ch∆°i!"
    },
    {
        "label": "Ng·∫°c nhi√™n",
        "emoji": "üò≤",
        "color": "#FFB300",
        "encourage": "Cu·ªôc s·ªëng lu√¥n ƒë·∫ßy b·∫•t ng·ªù, h√£y t·∫≠n h∆∞·ªüng nh√©!"
    }
]

# --- Session state ---
if "selected_emotion_idx" not in st.session_state:
    st.session_state.selected_emotion_idx = None
if "emotion_note" not in st.session_state:
    st.session_state.emotion_note = ""
if "emotion_history" not in st.session_state:
    st.session_state.emotion_history = []
if "show_history" not in st.session_state:
    st.session_state.show_history = False

# --- Tr·ª£ l√Ω ·∫£o & t√™n t√≠nh nƒÉng ---
ASSISTANT_MESSAGES = [
    ("ü§ñ", "Ch√†o m·ª´ng t·ªõi B·∫£ng M√†u C·∫£m X√∫c! H√£y ch·ªçn c·∫£m x√∫c v√† v·∫Ω m√†u l√™n khung nh√©!"),
    ("ü§ñ", "M·ªói c·∫£m x√∫c ƒë·ªÅu l√† m·ªôt m√†u s·∫Øc tuy·ªát v·ªùi. H√£y t·ª± do th·ªÉ hi·ªán!"),
    ("ü§ñ", "ƒê·ª´ng ng·∫°i chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh, Bee lu√¥n b√™n b·∫°n!"),
]
if "current_assistant_message" not in st.session_state or not isinstance(st.session_state.current_assistant_message, tuple):
    st.session_state.current_assistant_message = random.choice(ASSISTANT_MESSAGES)
avatar, msg = st.session_state.current_assistant_message

st.markdown(
    '<div class="bmcx-title-feature">'
    ' <span style="font-size:2.3rem;">üé®</span> B·∫£ng M√†u C·∫£m X√∫c'
    '</div>',
    unsafe_allow_html=True
)
st.markdown(f"""
<div class="bmcx-assist-bigbox">
    <div class="bmcx-assist-icon">{avatar}</div>
    <div class="bmcx-assist-text">{msg}</div>
</div>
""", unsafe_allow_html=True)

col1, col2 = st.columns([2,2])
with col1:
    if st.button("üí¨ Th√¥ng ƒëi·ªáp m·ªõi", key="new_msg_top"):
        st.session_state.current_assistant_message = random.choice(ASSISTANT_MESSAGES)
        st.rerun()
with col2:
    if st.button("üîä Nghe tr·ª£ l√Ω ·∫£o", key="tts_msg_top"):
        audio_bytes = BytesIO()
        tts = gTTS(text=msg, lang='vi', slow=False)
        tts.write_to_fp(audio_bytes)
        audio_bytes.seek(0)
        st.audio(audio_bytes.read(), format="audio/mp3")

st.page_link("pages/0_üíñ_Trang_ch·ªß.py", label="‚¨ÖÔ∏è Quay v·ªÅ Trang ch·ªß", icon="üè†")

# --- KHUNG V·∫º CANVAS (tr·∫Øng, v·∫Ω t·ª± do) ---
st.markdown("""
ƒê√¢y l√† kh√¥ng gian ƒë·ªÉ b·∫°n t·ª± do th·ªÉ hi·ªán. Kh√¥ng c·∫ßn ph·∫£i v·∫Ω ƒë·∫πp, kh√¥ng c·∫ßn ph·∫£i c√≥ √Ω nghƒ©a.  
H√£y ch·ªçn m·ªôt **m√†u s·∫Øc** th·ªÉ hi·ªán c·∫£m x√∫c c·ªßa b·∫°n l√∫c n√†y v√† ƒë·ªÉ tay b·∫°n di chuy·ªÉn m·ªôt c√°ch t·ª± nhi√™n.
""")
st.write("---")

col1, col2 = st.columns(2)
with col1:
    stroke_width = st.slider("ƒê·ªô d√†y n√©t b√∫t:", min_value=1, max_value=50, value=10)
    drawing_mode = st.selectbox(
        "C√¥ng c·ª•:",
        ("freedraw", "line", "rect", "circle", "transform"),
        help="Ch·ªçn 'freedraw' ƒë·ªÉ v·∫Ω t·ª± do, c√°c c√¥ng c·ª• kh√°c ƒë·ªÉ v·∫Ω h√¨nh h·ªçc."
    )
with col2:
    if st.session_state.selected_emotion_idx is not None:
        default_color = EMOTIONS[st.session_state.selected_emotion_idx]["color"]
    else:
        default_color = "#FF5733"
    stroke_color = st.color_picker("M√†u b√∫t:", default_color)
    bg_color = st.color_picker("M√†u n·ªÅn:", "#FFFFFF")

st.markdown('<div class="bmcx-palette-box">', unsafe_allow_html=True)
st.markdown("#### H√£y ch·ªçn c·∫£m x√∫c c·ªßa b·∫°n h√¥m nay:")
emotion_cols = st.columns(len(EMOTIONS))
for idx, emo in enumerate(EMOTIONS):
    with emotion_cols[idx]:
        selected = st.session_state.selected_emotion_idx == idx
        if st.button(f"{emo['emoji']}", key=f"emo_{idx}", help=emo["label"]):
            st.session_state.selected_emotion_idx = idx
            st.session_state.emotion_note = ""
            st.rerun()
        st.markdown(
            f"""
            <div class="bmcx-emotion-circle{' selected' if selected else ''}" style="background:{emo['color']};">
                {emo['emoji']}
            </div>
            <div class="bmcx-emotion-label">{emo['label']}</div>
            """,
            unsafe_allow_html=True
        )
st.markdown('</div>', unsafe_allow_html=True)

canvas_result = st_canvas(
    fill_color="rgba(255, 165, 0, 0.3)",
    stroke_width=stroke_width,
    stroke_color=stroke_color,
    background_color=bg_color,
    height=500,
    drawing_mode=drawing_mode,
    key="canvas",
    display_toolbar=True,
)

with st.expander("G·∫∑p l·ªói khi ch·∫°y trang n√†y?"):
    st.info(
        """
        **L∆∞u √Ω:** L·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng, b·∫°n c·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán cho t√≠nh nƒÉng n√†y.
        M·ªü Terminal ho·∫∑c Command Prompt v√† ch·∫°y l·ªánh sau:
        ```bash
        pip install streamlit-drawable-canvas
        ```
        Sau ƒë√≥, h√£y l√†m m·ªõi l·∫°i trang web.
        """
    )

# --- ƒê·ªông vi√™n theo c·∫£m x√∫c ƒë√£ ch·ªçn ---
if st.session_state.selected_emotion_idx is not None:
    emo = EMOTIONS[st.session_state.selected_emotion_idx]
    st.markdown(f"""
    <div class="bmcx-assist-bigbox" style="max-width:1200px;padding:2.1rem 1.5rem;">
        <span style="font-size:2.1rem;">{emo['emoji']}</span> <strong>{emo['encourage']}</strong>
    </div>
    """, unsafe_allow_html=True)
    col1, col2 = st.columns([2,2])
    with col1:
        if st.button("üîä Nghe ƒë·ªông vi√™n", key="tts_encourage"):
            audio_bytes = BytesIO()
            tts = gTTS(text=emo['encourage'], lang='vi', slow=False)
            tts.write_to_fp(audio_bytes)
            audio_bytes.seek(0)
            st.audio(audio_bytes.read(), format="audio/mp3")

# --- Nh·∫≠p ghi ch√∫ c·∫£m x√∫c ---
if st.session_state.selected_emotion_idx is not None:
    st.markdown('<div class="bmcx-note-box">', unsafe_allow_html=True)
    st.markdown("#### üìù B·∫°n mu·ªën chia s·∫ª th√™m v·ªÅ c·∫£m x√∫c c·ªßa m√¨nh kh√¥ng?")
    st.session_state.emotion_note = st.text_area(
        "",
        value=st.session_state.emotion_note,
        height=80,
        placeholder="B·∫°n c√≥ th·ªÉ m√¥ t·∫£ l√Ω do, ho√†n c·∫£nh ho·∫∑c ai ·ªü b√™n b·∫°n l√∫c n√†y..."
    )
    st.markdown('</div>', unsafe_allow_html=True)
    if st.button("üíæ L∆∞u c·∫£m x√∫c h√¥m nay", type="primary", use_container_width=True):
        now = datetime.now().strftime("%d/%m/%Y %H:%M")
        st.session_state.emotion_history.append({
            "emoji": emo["emoji"], "emotion": emo["label"], "note": st.session_state.emotion_note, "time": now
        })
        st.success("‚úÖ ƒê√£ l∆∞u c·∫£m x√∫c v√†o l·ªãch s·ª≠ c·ªßa b·∫°n!")
        st.balloons()
        st.session_state.selected_emotion_idx = None
        st.session_state.emotion_note = ""
        st.rerun()

st.write("---")

# --- L·ªãch s·ª≠ c·∫£m x√∫c ---
st.markdown("### üìñ L·ªãch s·ª≠ c·∫£m x√∫c c·ªßa b·∫°n")
if st.button("üìñ Xem l·ªãch s·ª≠", key="show_history_btn"):
    st.session_state.show_history = not st.session_state.show_history
if st.session_state.show_history:
    if st.session_state.emotion_history:
        for item in reversed(st.session_state.emotion_history):
            st.markdown(
                f"""
                <div class="bmcx-history-box">
                    <div style='font-size:2rem;display:inline-block;'>{item['emoji']}</div>
                    <span style='font-size:1.13rem;font-weight:700;margin-left:8px;color:#5d3fd3;'>{item['emotion']}</span>
                    <span style='font-size:1rem;color:#888;margin-left:12px;'>{item['time']}</span>
                    <div style='margin-top:0.6rem;'>{item['note'] if item['note'] else "<i>(Kh√¥ng c√≥ ghi ch√∫)</i>"}</div>
                </div>
                """,
                unsafe_allow_html=True
            )
    else:
        st.info("B·∫°n ch∆∞a l∆∞u c·∫£m x√∫c n√†o h√¥m nay. H√£y ch·ªçn v√† l∆∞u c·∫£m x√∫c nh√©!")

# --- Footer ---
st.markdown("""
<div class="bmcx-footer">
    <strong>üí´ L·ªùi nh·∫Øn t·ª´ Bee:</strong><br>
    "M·ªói c·∫£m x√∫c ƒë·ªÅu ƒë√°ng tr√¢n tr·ªçng. B·∫°n h√£y t·ª± tin chia s·∫ª v√† chƒÉm s√≥c c·∫£m x√∫c c·ªßa m√¨nh nh√©! üé®"
</div>
""", unsafe_allow_html=True)
