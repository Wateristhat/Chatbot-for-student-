import streamlit as st
import google.generativeai as genai

# --- 1. C·∫§U H√åNH TRANG V√Ä CSS T√ôY CH·ªàNH ---
st.set_page_config(
    page_title="Chatbot AI ƒê·∫ßy M√†u S·∫Øc",
    page_icon="üåà",
    layout="centered"
)

# CSS ƒë·ªÉ l√†m cho giao di·ªán m√†u m√®, gi·ªëng phong c√°ch b·∫°n mu·ªën
st.markdown("""
<style>
    /* N·ªÅn v√† font ch·ªØ t·ªïng th·ªÉ */
    body {
        font-family: 'Segoe UI', sans-serif;
    }

    .stApp {
        background: linear-gradient(to right, #fde4f2, #e6e6fa); /* Gradient n·ªÅn h·ªìng v√† t√≠m lavender */
    }

    /* Ti√™u ƒë·ªÅ ch√≠nh */
    h1 {
        font-size: 2.5em;
        text-align: center;
        background: linear-gradient(to right, #6a11cb, #2575fc); /* Gradient t√≠m v√† xanh cho ch·ªØ */
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    /* Bong b√≥ng chat c·ªßa ng∆∞·ªùi d√πng (user) */
    [data-testid="stChatMessage"]:has([data-testid="stAvatarIcon-user"]) {
        background-color: #ffffff; /* N·ªÅn tr·∫Øng */
        border-radius: 20px 20px 5px 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-right: 10%; /* Thu h·∫πp l·∫°i m·ªôt ch√∫t */
        border: 1px solid #e0e0e0;
    }

    /* Bong b√≥ng chat c·ªßa tr·ª£ l√Ω (assistant) */
    [data-testid="stChatMessage"]:has([data-testid="stAvatarIcon-assistant"]) {
        background: linear-gradient(to right, #d2b4de, #a0d2eb); /* Gradient t√≠m nh·∫°t v√† xanh nh·∫°t */
        border-radius: 20px 20px 20px 5px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-left: 10%; /* Thu h·∫πp l·∫°i m·ªôt ch√∫t */
        color: #1e1e1e; /* M√†u ch·ªØ t·ªëi ƒë·ªÉ d·ªÖ ƒë·ªçc */
    }

    /* √î nh·∫≠p li·ªáu chat */
    [data-testid="stChatInput"] {
        background-color: #ffffff;
        border-radius: 25px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        padding: 5px 15px;
    }

    /* N√∫t g·ª≠i tin nh·∫Øn */
    [data-testid="stChatInput"] button {
        background-color: #8e44ad; /* M√†u t√≠m ƒë·∫≠m */
        border-radius: 50%;
        color: white;
    }
    [data-testid="stChatInput"] button:hover {
        background-color: #9b59b6; /* T√≠m nh·∫°t h∆°n khi hover */
    }
</style>
""", unsafe_allow_html=True)


# --- 2. CODE G·ªêC C·ª¶A B·∫†N (GI·ªÆ NGUY√äN) ---

st.title("‚ú® Chatbot AI ƒê·ªìng H√†nh ‚ú®")
st.caption("Tr√≤ chuy·ªán v·ªõi m√¥ h√¨nh AI Gemini c·ªßa Google.")

# --- C·∫§U H√åNH GEMINI AI ---
# S·ª≠ d·ª•ng @st.cache_resource ƒë·ªÉ ch·ªâ kh·ªüi t·∫°o model m·ªôt l·∫ßn
@st.cache_resource
def configure_gemini():
    """
    C·∫•u h√¨nh v√† tr·∫£ v·ªÅ model Gemini.
    Hi·ªÉn th·ªã l·ªói n·∫øu API key kh√¥ng ƒë∆∞·ª£c cung c·∫•p.
    """
    try:
        # L·∫•y API key t·ª´ Streamlit secrets
        api_key = st.secrets["GOOGLE_API_KEY"]
        genai.configure(api_key=api_key)
        
        # D√≤ng n√†y b·∫°n ƒë√£ s·ª≠a ƒë·ªÉ d√πng model ch√≠nh x√°c
        model = genai.GenerativeModel("models/gemini-2.5-pro")
        
        return model
    except (KeyError, ValueError) as e:
        st.error("L·ªói: Vui l√≤ng c·∫•u h√¨nh GOOGLE_API_KEY trong file secrets.toml.")
        st.info("Xem h∆∞·ªõng d·∫´n t·∫°i: [Link h∆∞·ªõng d·∫´n n·∫øu c√≥]")
        st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ key

# Kh·ªüi t·∫°o model
model = configure_gemini()

# --- KH·ªûI T·∫†O L·ªäCH S·ª¨ CHAT ---
# B·∫Øt ƒë·∫ßu m·ªôt session chat m·ªõi v·ªõi Gemini
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])

# --- HI·ªÇN TH·ªä C√ÅC TIN NH·∫ÆN C≈® ---
# L·∫•y l·ªãch s·ª≠ t·ª´ session chat c·ªßa Gemini
for message in st.session_state.chat.history:
    # Ph√¢n bi·ªát vai tr√≤ "user" (ng∆∞·ªùi d√πng) v√† "model" (AI)
    role = "assistant" if message.role == "model" else message.role
    with st.chat_message(role):
        st.markdown(message.parts[0].text)

# --- NH·∫¨N INPUT T·ª™ NG∆Ø·ªúI D√ôNG V√Ä X·ª¨ L√ù ---
if prompt := st.chat_input("H·ªèi AI b·∫•t c·ª© ƒëi·ªÅu g√¨..."):
    # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
    with st.chat_message("user"):
        st.markdown(prompt)

    # G·ª≠i tin nh·∫Øn t·ªõi Gemini v√† nh·∫≠n ph·∫£n h·ªìi
    with st.chat_message("assistant"):
        with st.spinner("AI ƒëang suy nghƒ©..."):
            try:
                # G·ª≠i prompt v√† nh·∫≠n response
                response = st.session_state.chat.send_message(prompt)
                # Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ AI
                st.markdown(response.text)
            except Exception as e:
                # X·ª≠ l√Ω c√°c l·ªói c√≥ th·ªÉ x·∫£y ra (v√≠ d·ª•: l·ªói k·∫øt n·ªëi, n·ªôi dung b·ªã ch·∫∑n)
                st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}")
