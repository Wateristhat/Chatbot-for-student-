# File: pages/5_üé≤_Tro_Choi_Tri_Tue.py

import streamlit as st
import random
import time

st.set_page_config(page_title="Tr√≤ Ch∆°i Tr√≠ Tu·ªá", page_icon="üé≤", layout="centered")

st.title("üé≤ Tr√≤ Ch∆°i Tr√≠ Tu·ªá")
st.markdown("C√πng th∆∞ gi√£n v·ªõi nh·ªØng tr√≤ ch∆°i nh·∫π nh√†ng, kh√¥ng √°p l·ª±c ƒë·ªÉ r√®n luy·ªán s·ª± t·∫≠p trung v√† tr√≠ nh·ªõ nh√©!")
st.write("---")

# --- Tr√≤ ch∆°i: N·ªëi H√¨nh Gi·ªëng Nhau (Memory Match) ---
st.header("üß† N·ªëi H√¨nh Gi·ªëng Nhau")

# MODIFIED: S·ª≠a l·∫°i c√°ch t·∫°o danh s√°ch ICONS
# Bi·∫øn m·ªôt chu·ªói th√†nh m·ªôt danh s√°ch c√°c k√Ω t·ª± (emoji)
ICONS = list("üê∂üê±üê≠üêπüê∞ü¶äüêªüêºüê®üêØü¶ÅüêÆüê∑üê∏üêµüôàüôâüôäüêíüêîüêßüê¶üê§üê£üê•ü¶Üü¶Öü¶âü¶áüê∫üêóüê¥ü¶Ñüêùüêõü¶ãüêåüêûüêúü¶üü¶óüï∑Ô∏èü¶Çüê¢üêçü¶éü¶ñü¶ïüêôü¶ëü¶êü¶Äüê°üê†üêüüê¨üê≥üêãü¶àüêäüêÖüêÜü¶ìü¶çüêòü¶õü¶èüê™üê´ü¶íüêÉüêÇüêÑüêéüêñüêèüêëüêêü¶åüêïüê©üêàüêìü¶ÉüïäÔ∏èüêáüêÅüêÄüêøÔ∏èü¶î")

def setup_game(rows, cols):
    """Kh·ªüi t·∫°o tr√≤ ch∆°i"""
    if rows * cols % 2 != 0:
        st.error("S·ªë √¥ ph·∫£i l√† s·ªë ch·∫µn!")
        return

    num_pairs = (rows * cols) // 2

    # B∆∞·ªõc ki·ªÉm tra an to√†n
    if num_pairs > len(ICONS):
        st.error(f"L·ªói c·∫•u h√¨nh: Tr√≤ ch∆°i c·∫ßn {num_pairs} c·∫∑p icon, nh∆∞ng ch·ªâ c√≥ {len(ICONS)} icon kh√°c nhau. Vui l√≤ng th√™m icon v√†o danh s√°ch ICONS trong code.")
        return

    icons_for_game = random.sample(ICONS, num_pairs) * 2
    random.shuffle(icons_for_game)

    st.session_state.board = [[icons_for_game.pop() for _ in range(cols)] for _ in range(rows)]
    st.session_state.flipped = [[False for _ in range(cols)] for _ in range(rows)]
    st.session_state.matched = [[False for _ in range(cols)] for _ in range(rows)]
    st.session_state.first_pick = None
    st.session_state.second_pick = None
    st.session_state.moves = 0
    st.session_state.game_over = False

# L·ª±a ch·ªçn ƒë·ªô kh√≥
difficulty = st.selectbox("Ch·ªçn ƒë·ªô kh√≥:", ["D·ªÖ (2x4)", "V·ª´a (4x4)", "Kh√≥ (4x5)"])

rows, cols = 0, 0
if difficulty == "D·ªÖ (2x4)":
    rows, cols = 2, 4
elif difficulty == "V·ª´a (4x4)":
    rows, cols = 4, 4
elif difficulty == "Kh√≥ (4x5)":
    rows, cols = 4, 5

if 'board' not in st.session_state or st.button("Ch∆°i l·∫°i/B·∫Øt ƒë·∫ßu v√°n m·ªõi", type="primary"):
    setup_game(rows, cols)
    st.rerun()

if 'board' in st.session_state and st.session_state.board:
    if st.session_state.game_over:
        st.success(f"üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh tr√≤ ch∆°i sau {st.session_state.moves} l∆∞·ª£t. üéâ")
        st.balloons()
    else:
        st.info(f"S·ªë l∆∞·ª£t ƒë√£ ƒëi: {st.session_state.moves}")
        
        # Logic l·∫≠t b√†i v√† ki·ªÉm tra
        if st.session_state.second_pick:
            r1, c1 = st.session_state.first_pick
            r2, c2 = st.session_state.second_pick
            if st.session_state.board[r1][c1] != st.session_state.board[r2][c2]:
                # D·ª´ng m·ªôt ch√∫t ƒë·ªÉ ng∆∞·ªùi d√πng nh√¨n th·∫•y th·∫ª th·ª© 2
                time.sleep(0.5) 
                st.session_state.flipped[r1][c1] = False
                st.session_state.flipped[r2][c2] = False
            st.session_state.first_pick, st.session_state.second_pick = None, None
            st.rerun()

        # V·∫Ω b√†n ch∆°i
        for r in range(rows):
            grid_cols = st.columns(cols)
            for c in range(cols):
                is_flipped = st.session_state.flipped[r][c]
                is_matched = st.session_state.matched[r][c]
                
                button_label = st.session_state.board[r][c] if is_flipped or is_matched else "‚ùì"
                
                if grid_cols[c].button(button_label, key=f"btn_{r}_{c}", use_container_width=True, disabled=(is_flipped or is_matched)):
                    st.session_state.flipped[r][c] = True
                    if not st.session_state.first_pick:
                        st.session_state.first_pick = (r, c)
                    else:
                        st.session_state.second_pick = (r, c)
                        st.session_state.moves += 1
                        r1, c1 = st.session_state.first_pick
                        r2, c2 = st.session_state.second_pick
                        if st.session_state.board[r1][c1] == st.session_state.board[r2][c2]:
                            st.session_state.matched[r1][c1] = True
                            st.session_state.matched[r2][c2] = True
                            st.session_state.first_pick, st.session_state.second_pick = None, None
                            
                            if all(all(row) for row in st.session_state.matched):
                                st.session_state.game_over = True
                    st.rerun()
