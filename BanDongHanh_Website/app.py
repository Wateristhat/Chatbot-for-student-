import streamlit as st
import random
import re
import time
import html
import database as db
import google.generativeai as genai
from gtts import gTTS
from io import BytesIO
import base64

# --- KI·ªÇM TRA ƒêƒÇNG NH·∫¨P ---
if not st.session_state.get('user_id'):
    st.warning("B·∫°n ∆°i, h√£y quay v·ªÅ Trang Ch·ªß ƒë·ªÉ ƒëƒÉng nh·∫≠p ho·∫∑c t·∫°o t√†i kho·∫£n m·ªõi nh√©! ‚ù§Ô∏è")
    st.stop()

user_id = st.session_state.user_id
user_name = st.session_state.user_name

# --- B·ªò L·ªåC T·ª™ KH√ìA NGUY HI·ªÇM ---
CRISIS_KEYWORDS = [
    "t·ª± t·ª≠", "t·ª± s√°t", "k·∫øt li·ªÖu", "ch·∫•m d·ª©t", "kh√¥ng mu·ªën s·ªëng",
    "mu·ªën ch·∫øt", "k·∫øt th√∫c t·∫•t c·∫£", "l√†m h·∫°i b·∫£n th√¢n", "t·ª± l√†m ƒëau",
    "tuy·ªát v·ªçng", "v√¥ v·ªçng", "kh√¥ng c√≤n hy v·ªçng"
]

# --- C√ÅC H·∫∞NG S·ªê V√Ä C·∫§U H√åNH ---
CHAT_STATE_MAIN = 'main'
CHAT_STATE_TAM_SU_SELECTION = 'tam_su_selection'
CHAT_STATE_TAM_SU_CHAT = 'tam_su_chat'
CHAT_STATE_GIAO_TIEP_SELECTION_BASIC = 'giao_tiep_selection_basic'
CHAT_STATE_GIAO_TIEP_SELECTION_EXTENDED = 'giao_tiep_selection_extended'
CHAT_STATE_GIAO_TIEP_PRACTICE = 'giao_tiep_practice'
CHAT_STATE_AWAITING_FOLLOWUP = 'awaiting_followup'

@st.cache_data
def get_config():
    # (To√†n b·ªô config c·ªßa b·∫°n c√≥ th·ªÉ d√°n v√†o ƒë√¢y)
    return { "ui": { "title": "B·∫°n ƒë·ªìng h√†nh üíñ", "input_placeholder": "Nh·∫≠p tin nh·∫Øn..." } } # V√≠ d·ª• r√∫t g·ªçn
CONFIG = get_config()

try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    gemini_model = genai.GenerativeModel('gemini-1.5-flash')
    AI_ENABLED = True
except Exception:
    AI_ENABLED = False

st.set_page_config(page_title=CONFIG["ui"]["title"], layout="wide")
st.markdown(r"""<style>...</style>""", unsafe_allow_html=True) # Gi·ªØ nguy√™n CSS c·ªßa b·∫°n

# --- KH·ªûI T·∫†O V√Ä T·∫¢I D·ªÆ LI·ªÜU ---
if "chat_initialized" not in st.session_state:
    st.session_state.chat_state = CHAT_STATE_MAIN
    st.session_state.history = db.get_chat_history(user_id)
    if not st.session_state.history:
        initial_message = f"Ch√†o {user_name}, m√¨nh l√† B·∫°n ƒë·ªìng h√†nh ƒë√¢y! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"
        st.session_state.history = [{"sender": "bot", "text": initial_message}]
        db.add_chat_message(user_id, "bot", initial_message)
    st.session_state.turns = 0
    st.session_state.current_mood = None
    st.session_state.current_scenario = None
    st.session_state.user_input = ""
    st.session_state.chat_initialized = True

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
def check_for_crisis(text):
    lowered_text = text.lower()
    for keyword in CRISIS_KEYWORDS:
        if keyword in lowered_text:
            return True
    return False

def render_crisis_response():
    st.error("M√¨nh nghe th·∫•y b·∫°n ƒëang th·ª±c s·ª± r·∫•t kh√≥ khƒÉn. ƒêi·ªÅu quan tr·ªçng nh·∫•t ngay b√¢y gi·ªù l√† b·∫°n ƒë∆∞·ª£c an to√†n. D∆∞·ªõi ƒë√¢y l√† nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ gi√∫p ƒë·ª° b·∫°n ngay l·∫≠p t·ª©c.", icon="‚ù§Ô∏è")
    st.markdown("""
        <div style="background-color: #FFFFE0; border-left: 6px solid #FFC107; padding: 15px; border-radius: 5px;">
            <h4>Vui l√≤ng li√™n h·ªá m·ªôt trong nh·ªØng s·ªë ƒëi·ªán tho·∫°i sau:</h4>
            <ul>
                <li><strong>T·ªïng ƒë√†i Qu·ªëc gia B·∫£o v·ªá Tr·∫ª em:</strong> <strong style="font-size: 1.2em;">111</strong> (Mi·ªÖn ph√≠, 24/7)</li>
                <li><strong>ƒê∆∞·ªùng d√¢y n√≥ng Ng√†y Mai:</strong> <strong style="font-size: 1.2em;">096.357.9488</strong> (H·ªó tr·ª£ ng∆∞·ªùi tr·∫ßm c·∫£m)</li>
            </ul>
            <p><strong>L√†m ∆°n h√£y g·ªçi nh√©. B·∫°n kh√¥ng ƒë∆°n ƒë·ªôc ƒë√¢u.</strong></p>
        </div>
        """, unsafe_allow_html=True)
    st.stop()

def add_message_and_save(sender, text):
    st.session_state.history.append({"sender": sender, "text": text})
    db.add_chat_message(user_id, sender, text)

# (C√°c h√†m kh√°c nh∆∞ text_to_speech, call_gemini_with_memory... gi·ªØ nguy√™n)

# --- GIAO DI·ªÜN CH√çNH ---
st.title("üí¨ Tr√≤ chuy·ªán c√πng Bot")

if st.session_state.get('crisis_detected'):
    render_crisis_response()

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.history:
    with st.chat_message("user" if message["sender"] == "user" else "assistant"):
        st.markdown(message["text"])

# Thanh nh·∫≠p li·ªáu
if prompt := st.chat_input("Nh·∫≠p tin nh·∫Øn..."):
    if check_for_crisis(prompt):
        add_message_and_save("user", prompt)
        st.session_state.crisis_detected = True
        st.rerun()
    else:
        add_message_and_save("user", prompt)
        # (Logic g·ªçi AI v√† x·ª≠ l√Ω input th√¥ng th∆∞·ªùng c·ªßa b·∫°n)
        st.rerun()
